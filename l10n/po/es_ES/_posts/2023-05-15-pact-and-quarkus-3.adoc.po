# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-05-15 10:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "hcummins"
msgstr "hcummins"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "2023-05-15"
msgstr "2023-05-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "With Quarkus 3 and the Quarkiverse Pact extensions, Quarkus can run continuous tests continuously."
msgstr "Con Quarkus 3 y las extensiones Quarkiverse Pact, Quarkus puede ejecutar pruebas continuas continuamente."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "extension"
msgstr "extensión"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "Using Pact and Quarkus to Tame Microservices Testing"
msgstr "Uso de Pact y Quarkus para domar las pruebas de microservicios"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:13
#, fuzzy
msgid "In a microservices architecture, making sure each microservices works is (relatively) easy.  The microservices are usually small, and easy to test.  But how do you make sure the microservices work together? How do you know if the system as a whole works?"
msgstr "En una arquitectura de microservicios, asegurarse de que cada microservicio funciona es (relativamente) fácil. Los microservicios suelen ser pequeños y fáciles de probar. Pero, ¿cómo asegurarse de que los microservicios funcionan juntos? ¿Cómo saber si el sistema en su conjunto funciona?"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:16
#, fuzzy
msgid "One answer is contract testing.  Contract testing gives more confidence than testing individual services, but the cost is far lower than end-to-end testing."
msgstr "Una respuesta son las pruebas por contrato. Las pruebas por contrato ofrecen más confianza que las pruebas de servicios individuales, pero el coste es mucho menor que el de las pruebas de extremo a extremo."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:17
#, fuzzy, no-wrap
msgid "What's wrong with end-to-end testing?"
msgstr "¿Qué tienen de malo las pruebas de extremo a extremo?"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:23
#, fuzzy
msgid "Even when developing, standing up all the dependencies and consumers for an individual microservice can be hard work.  Recently, our consulting colleagues received a plea for help from the CTO of a tech startup, who couldn't run his dev stack on a brand new laptop with 64 GB of RAM, because the application involved dozens of microservices and they consumed so many resources.  (If this sounds familiar, Quarkus can help https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[lower the resource consumption of the stack], but that's a different topic!)"
msgstr "Incluso durante el desarrollo, poner en pie todas las dependencias y consumidores de un microservicio individual puede ser un trabajo duro. Recientemente, nuestros colegas consultores recibieron una petición de ayuda del director de tecnología de una startup tecnológica, que no podía ejecutar su pila de desarrollo en un portátil nuevo con 64 GB de RAM, porque la aplicación incluía docenas de microservicios y consumían muchos recursos. (Si esto te suena familiar, Quarkus puede ayudar a  link:https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[reducir el consumo de] recursos de la pila, ¡pero ese es otro tema!)."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:27
#, fuzzy, no-wrap
msgid ""
"Teams sometimes address the challenge of local microservices development by providing remote environments into which local code can be injected.\n"
" This is sometimes called https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal development\"] or telepresence.\n"
"Another, purely local, model, is https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[local virtual environments].\n"
msgstr "Los equipos a veces abordan el reto del desarrollo local de microservicios proporcionando entornos remotos en los que se puede inyectar código local. Esto se denomina a veces  link:https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"desarrollo remoto\"] o telepresencia. Otro modelo, puramente local, son  link:https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[los entornos virtuales locales]."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:29
#, fuzzy
msgid "While these environments can be useful, they can also be fragile, and managing them often needs a dedicated platform team."
msgstr "Aunque estos entornos pueden ser útiles, también pueden ser frágiles, y su gestión a menudo requiere un equipo dedicado a la plataforma."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:30
#, fuzzy, no-wrap
msgid "What's wrong with mocks?"
msgstr "¿Qué tienen de malo los simulacros?"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:38
#, fuzzy
msgid "When having 'real' versions of the rest of the system to test against is too heavy, teams often use mocks or stubs.  (Mocks and stubs are subtly different, but for simplicity I'll use \"mocks\" to describe both.)  Mocks have many advantages; they're lightweight and enable unit testing of code with external dependencies.  However, mocks also have a big disadvantage; there's no guarantee the mock behaves like real the thing.  Users of a service will bake their own assumptions about how a service behaves into a mock.  If a service changes, it's up to consuming code to figure out what's changed and update the mocks."
msgstr "Cuando tener versiones \"reales\" del resto del sistema contra las que probar es demasiado pesado, los equipos suelen usar mocks o stubs. (Mocks y stubs son sutilmente diferentes, pero para simplificar usaré \"mocks\" para describir a ambos). Los mocks tienen muchas ventajas; son ligeros y permiten realizar pruebas unitarias de código con dependencias externas. Sin embargo, los mocks también tienen una gran desventaja; no hay garantía de que el mock se comporte como la cosa real. Los usuarios de un servicio harán sus propias suposiciones sobre cómo se comporta un servicio en un mock. Si un servicio cambia, depende del código de consumo averiguar qué ha cambiado y actualizar los mocks."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:40
#, fuzzy
msgid "Sometimes, the first time these assumptions are tested is in production."
msgstr "A veces, la primera vez que se ponen a prueba estos supuestos es en producción."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:41
#, fuzzy, no-wrap
msgid "Contract tests"
msgstr "Pruebas contractuales"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:45
#, fuzzy
msgid "How can we make a link between the mock being used by a consumer, and the functional validation being done by the provider? This is where contract testing helps. A contract testing framework powers two things:"
msgstr "¿Cómo podemos establecer un vínculo entre el simulacro que utiliza un consumidor y la validación funcional que realiza el proveedor? Aquí es donde ayudan las pruebas de contratos. Un marco de pruebas de contrato permite dos cosas:"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:47
#, fuzzy
msgid "A generated mock, which is used by the consumer to validate the consumer code behaves correctly. The mock is generated from the contract and examples."
msgstr "Un simulacro generado, que es utilizado por el consumidor para validar que el código del consumidor se comporta correctamente. El simulacro se genera a partir del contrato y los ejemplos."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:48
#, fuzzy
msgid "Generated functional tests, which is validates the provider behaves as expected. These tests are generated from the same contract and examples as the consumer's mock."
msgstr "Pruebas funcionales generadas, que validan que el proveedor se comporta como se espera. Estas pruebas se generan a partir del mismo contrato y ejemplos que el simulacro del consumidor."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:53
#, fuzzy
msgid "With https://en.wikipedia.org/wiki/Test-driven_development[Test Driven Development(TDD)], you start with tests (a description of the desired behaviour) and work backwards to an implementation.  You can do the same thing with contract testing; you start with the contract, which describes what the service needs to do, and work backwards to the implementation.  This is known as \"contract-first\", and it can be a very effective development technique.  My colleagues in Red Hat App Dev Consulting have written some great articles about https://appdev.consulting.redhat.com/tracks/contract-first/[how they use contract-first development]."
msgstr "Con el  link:https://en.wikipedia.org/wiki/Test-driven_development[Desarrollo Orientado a Pruebas (TDD)], se empieza por las pruebas (una descripción del comportamiento deseado) y se va retrocediendo hasta la implementación. Se puede hacer lo mismo con las pruebas de contratos: se empieza por el contrato, que describe lo que debe hacer el servicio, y se va retrocediendo hasta la implementación. Esto se conoce como \"primero el contrato\" y puede ser una técnica de desarrollo muy eficaz. Mis colegas de Red Hat App Dev Consulting han escrito algunos artículos fantásticos sobre  link:https://appdev.consulting.redhat.com/tracks/contract-first/[cómo utilizan el desarrollo \"]contract-first\"."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:54
#, fuzzy, no-wrap
msgid "Contract test options"
msgstr "Opciones de prueba por contrato"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:60
#, fuzzy
msgid "There are a few different contract-testing frameworks out there, including Pact, Microcks, Spring Cloud Contract.  Some teams also build up their own OpenAPI-based toolchains, such as Schemathesis for functional tests, and Prism for the mocking.  Arguably the most popular contract testing solution is Pact, so it's where the Quarkiverse support for contract testing has started."
msgstr "Existen varios marcos de pruebas de contratos, como Pact, Microcks o Spring Cloud Contract. Algunos equipos también construyen sus propias cadenas de herramientas basadas en OpenAPI, como Schemathesis para pruebas funcionales y Prism para el mocking. Podría decirse que la solución de pruebas de contratos más popular es Pact, por lo que es donde ha comenzado el apoyo de Quarkiverse a las pruebas de contratos."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:62
#, fuzzy
msgid "Pact is polyglot, with bindings for almost all popular languages."
msgstr "Pact es políglota, con bindings para casi todos los idiomas populares."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:63
#, fuzzy
msgid "It's an integrated solution which provides both mocks for consumers and functional tests for providers."
msgstr "Es una solución integrada que proporciona tanto mocks para consumidores como pruebas funcionales para proveedores."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:64
#, fuzzy
msgid "It's standalone, and can be run without standing up any extra services, although a Pact Broker with some nice value-adds is available."
msgstr "Es independiente y puede ejecutarse sin necesidad de instalar ningún servicio adicional, aunque hay disponible un Pact Broker con algunos interesantes valores añadidos."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:65
#, fuzzy
msgid "Although Pact started as a REST-only solution, it is now https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[pluggable], which allows it to support a range of protocols and transports"
msgstr "Aunque Pact comenzó como una solución REST, ahora es  link:https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[conectable], lo que le permite admitir diversos protocolos y transportes."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:68
#, fuzzy
msgid "The Pact team have a https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[good overview] of the advantages and disadvantages of schema-based testing (such as validation based on an OpenAPI spec) and contract testing."
msgstr "El equipo de Pact tiene una  link:https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[buena visión de conjunto] de las ventajas e inconvenientes de las pruebas basadas en esquemas (como la validación basada en una especificación OpenAPI) y las pruebas de contratos."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:69
#, fuzzy, no-wrap
msgid "What's new with Pact and Quarkus"
msgstr "Novedades de Pacto y Quarkus"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:73
#, fuzzy
msgid "Using Pact with Quarkus isn't new; Quarkus contributors made https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[several] https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[classloading adjustments] in Quarkus core to support Pact testing in Quarkus 2.0, but this support was limited. In particular, Pact tests couldn't run in continuous testing mode."
msgstr "El uso de Pact con Quarkus no es nuevo; los colaboradores de Quarkus hicieron  link:https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[varios]  link:https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[ajustes de carga de clases] en el núcleo de Quarkus para admitir las pruebas de Pact en Quarkus 2.0, pero esta compatibilidad era limitada. En particular, las pruebas de Pact no podían ejecutarse en modo de prueba continua."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:78
#, fuzzy
msgid "Quarkus 3.0 moves Pact support from Quarkus core to its own Quarkiverse extension, where it can be deeper.  Quarkus core also includes classloading changes in the Kotlin extension and some classloading fixes in continuous testing itself.  These mean that, with the Pact Quarkiverse http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider] and http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer extensions] Pact tests work properly with `quarkus test` and `quarkus dev`."
msgstr "Quarkus 3.0 traslada el soporte de Pact del núcleo de Quarkus a su propia extensión Quarkiverse, donde puede ser más profundo. Quarkus core también incluye cambios de carga de clases en la extensión Kotlin y algunas correcciones de carga de clases en las propias pruebas continuas. Esto significa que, con  link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[las extensiones] Pact Quarkiverse  link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider] y  link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer], las pruebas de Pact funcionan correctamente con `quarkus test` y `quarkus dev`."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:80
#, fuzzy
msgid "To install the consumer extensions, run"
msgstr "Para instalar las extensiones de consumidor, ejecute"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:84
#, fuzzy
msgid "``` quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:89
#, fuzzy
msgid "The provider extension can be installed with ``` quarkus ext add io.quarkiverse.pact:quarkus-pact-provider ```"
msgstr "La extensión del proveedor puede instalarse con `` quarkus ext add io.quarkiverse.pact:quarkus-pact-provider``."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:91
#, fuzzy
msgid "For a deeper dive into contract testing, check out https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."
msgstr "Para profundizar en las pruebas de contratos, consulte  link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:93
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:98
#, fuzzy
msgid "If you're using microservices, you should seriously consider contract testing.  With the new Pact extension, Quarkus 3 allows contract tests to be developed using the same great workflow as other tests."
msgstr "Si estás usando microservicios, deberías considerar seriamente las pruebas de contratos. Con la nueva extensión Pact, Quarkus 3 permite que las pruebas de contratos se desarrollen utilizando el mismo gran flujo de trabajo que otras pruebas."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:99
#, fuzzy, no-wrap
msgid "More resources"
msgstr "Más recursos"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:102
#, fuzzy
msgid "https://github.com/holly-cummins/pact-quarkus-sweater-demo[Sample application showing the Quarkus Pact extension]"
msgstr "link:https://github.com/holly-cummins/pact-quarkus-sweater-demo[Ejemplo de aplicación de la extensión Quarkus Pact]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:103
#, fuzzy
msgid "https://docs.pact.io/implementation_guides/jvm[The Pact JVM binding documentation]"
msgstr "link:https://docs.pact.io/implementation_guides/jvm[Documentación sobre el enlace JVM de Pact]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:104
#, fuzzy
msgid "https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights about the Pact extension]"
msgstr "link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights sobre la ampliación del Pacto]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:105
#, fuzzy
msgid "https://appdev.consulting.redhat.com/tracks/contract-first/[Contract-first development](with OpenAPIGenerator, Schemathesis, and Prism)"
msgstr "link:https://appdev.consulting.redhat.com/tracks/contract-first/[Desarrollo basado en contratos](con OpenAPIGenerator, Schemathesis y Prism)"
