# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "2021-02-02"
msgstr "2021-02-02"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "How to build a Quarkus application using AMQP in less than 10 minutes"
msgstr "Cómo construir una aplicación Quarkus usando AMQP en menos de 10 minutos"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "amqp"
msgstr "amqp"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:1
#, fuzzy, no-wrap
msgid "Getting Started with AMQP in your Quarkus application"
msgstr "Cómo empezar con AMQP en su aplicación Quarkus"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:13
#, fuzzy
msgid "https://www.amqp.org/[AMQP 1.0] is a standard for passing messages between applications or organizations.  It connects systems, feeds business processes with the information they need, and reliably handles communication between systems.  AMQP is a robust and mature protocol widely used in event-driven applications."
msgstr "link:https://www.amqp.org/[AMQP 1.] 0 es un estándar para el paso de mensajes entre aplicaciones u organizaciones. Conecta los sistemas, alimenta los procesos de negocio con la información que necesitan y maneja de forma fiable la comunicación entre sistemas. AMQP es un protocolo robusto y maduro ampliamente utilizado en aplicaciones basadas en eventos."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:17
#, fuzzy
msgid "This post is the equivalent of the https://quarkus.io/blog/getting-started-kafka/[Kafka getting started post], but focuses on the usage of AMQP.  You will learn how to get started with AMQP in your Quarkus application in less than ten steps.  We will use https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] - a declarative approach to building event-driven microservices."
msgstr "Este post es el equivalente al  link:https://quarkus.io/blog/getting-started-kafka/[de Kafka getting started], pero se centra en el uso de AMQP. Usted aprenderá cómo empezar con AMQP en su aplicación Quarkus en menos de diez pasos. Utilizaremos  link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.7/index.html[SmallRye Reactive Messaging] - un enfoque declarativo para la construcción de microservicios impulsados por eventos."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:19
#, fuzzy
msgid "The complete code is available from https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub]."
msgstr "El código completo está disponible en  link:https://github.com/cescoffier/getting-started-quarkus-amqp[GitHub]."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:20
#, fuzzy, no-wrap
msgid "Step 1 - Generate your project"
msgstr "Paso 1 - Genere su proyecto"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:25
#, fuzzy
msgid "Let's start with the very beginning, getting a new project structure with the right dependencies.  Go to https://code.quarkus.io, enter your group id and artifact id.  Then in the extension list, select:"
msgstr "Empecemos por el principio, obteniendo una nueva estructura de proyecto con las dependencias correctas. Ve a  https://code.quarkus.io  introduce tu id de grupo y tu id de artefacto. Luego, en la lista de extensiones, selecciona:"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:27
#, fuzzy
msgid "SmallRye Reactive Messaging - AMQP Connector"
msgstr "SmallRye Reactive Messaging - Conector AMQP"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:28
#, fuzzy
msgid "RESTEasy Jackson"
msgstr "RESTEasy Jackson"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:30
#, fuzzy
msgid "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[]"
msgstr "image:/assets/images/posts/getting-started-amqp/getting-started-amqp-code.png[alt=getting started amqp code]"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:32
#, fuzzy
msgid "You can disable the \"Example Code\" to avoid the generated project containing examples."
msgstr "Puede desactivar el \"Código de ejemplo\" para evitar que el proyecto generado contenga ejemplos."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:34
#, fuzzy
msgid "Then, click on __Generate your application__, download the project as a zip file, unzip it, and load it in your favorite IDE."
msgstr "A continuación, haga clic en _Generar su aplicación_, descargue el proyecto como un archivo zip, descomprímalo y cárguelo en su IDE favorito."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:37
#, fuzzy
msgid "If you opened the generated `pom.xml`, you would see that the `quarkus-smallrye-reactive-messaging-amqp` and `quarkus-resteasy-jackson` dependencies are declared, so we're ready to write some code."
msgstr "Si abrieras el `pom.xml` generado, verías que las dependencias `quarkus-smallrye-reactive-messaging-amqp` y `quarkus-resteasy-jackson` están declaradas, así que estamos listos para escribir algo de código."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:38
#, fuzzy, no-wrap
msgid "Step 2 - What are we going to exchange?"
msgstr "Paso 2 - ¿Qué vamos a intercambiar?"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:43
#, fuzzy
msgid "We need something to exchange.  Without much originality, let's say we will send and receive `Movie` objects.  In your project, create the `org.acme.Movie` class with the following content:"
msgstr "Necesitamos algo para intercambiar. Sin mucha originalidad, digamos que enviaremos y recibiremos objetos `Movie`. En tu proyecto, crea la clase `org.acme.Movie` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:47
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:105
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:140
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:167
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:209
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:49
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:52
#, no-wrap
msgid ""
"    public String title;\n"
"    public int year;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:54
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:59
#, fuzzy
msgid "With AMQP, we exchange http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[messages], which can have multiple _data_ sections (or multiple AMQP sequences, or a single AMQP value section).  In our application, as we are exchanging `Movie` object, it encodes the instances as JSON and transfers it in a single _data_ section.  The `content-type` header is set to `application/json`."
msgstr "Con AMQP, intercambiamos  link:http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format[mensajes], que pueden tener múltiples secciones de _datos_ (o múltiples secuencias AMQP, o una sola sección de valores AMQP). En nuestra aplicación, como estamos intercambiando el objeto `Movie`, codifica las instancias como JSON y las transfiere en una sola sección de _datos_. La cabecera `content-type` se establece como `application/json`."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:62
#, fuzzy
msgid "AMQP messages are sent to a destination.  To keep things simple, let's name it __movies__."
msgstr "Los mensajes AMQP se envían a un destino. Para simplificar las cosas, llamémosle _películas_."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:63
#, fuzzy, no-wrap
msgid "Step 3 - Configure the application"
msgstr "Paso 3 - Configurar la aplicación"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:70
#, fuzzy
msgid "As said above, we will use Reactive Messaging.  When you use Reactive Messaging, you send messages to a channel and receive them from another channel.  These channels are mapped to the underlying messaging technology by configuration.  We must indicate that our reception and publication channels will use the __movies__ address in our application.  In `src/main/resources/application.properties`, add the following content:"
msgstr "Como se ha dicho anteriormente, utilizaremos la Mensajería Reactiva. Cuando se utiliza la Mensajería Reactiva, se envían mensajes a un canal y se reciben de otro canal. Estos canales se asignan a la tecnología de mensajería subyacente mediante la configuración. Debemos indicar que nuestros canales de recepción y publicación utilizarán la dirección de _películas_ en nuestra aplicación. En `src/main/resources/application.properties`, añada el siguiente contenido:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:78
#, no-wrap
msgid ""
"# The AMQP broker location and credentials\n"
"amqp-host=localhost\n"
"amqp-port=5672\n"
"amqp-username=quarkus\n"
"amqp-password=quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:82
#, no-wrap
msgid ""
"# Configuring the incoming channel (reading from AMQP)\n"
"mp.messaging.incoming.movies-in.connector=smallrye-amqp\n"
"mp.messaging.incoming.movies-in.address=movies\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:86
#, no-wrap
msgid ""
"# Configuring the outgoing channel (writing to AMQP)\n"
"mp.messaging.outgoing.movies-out.connector=smallrye-amqp\n"
"mp.messaging.outgoing.movies-out.address=movies\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:89
#, fuzzy
msgid "After having configured the broker location and credentials (`amqp-` properties), we configure our two channels: `movies-in` (receiving the records) and `movies-out` (publishing the records)."
msgstr "Después de haber configurado la ubicación del broker y las credenciales ( `amqp-` properties), configuramos nuestros dos canales: `movies-in` (recibir los registros) y `movies-out` (publicar los registros)."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:93
#, fuzzy
msgid "We use the `mp.messaging.incoming.movies-in` prefix to configure the channel.  The `connector` attribute indicates who's responsible for this channel, here the AMQP connector.  We also need to specify the consumed destination using the `address` attribute."
msgstr "Utilizamos el prefijo `mp.messaging.incoming.movies-in` para configurar el canal. El atributo `connector` indica quién es el responsable de este canal, aquí el conector AMQP. También tenemos que especificar el destino consumido usando el atributo `address`."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:96
#, fuzzy
msgid "To configure the outbound `movies-out` channel, we use the `mp.messaging.outgoing.movies-out` prefix.  In addition to indicating who's responsible for that channel, we also need to configure the address."
msgstr "Para configurar el canal de salida `movies-out`, utilizamos el prefijo `mp.messaging.outgoing.movies-out`. Además de indicar quién es el responsable de ese canal, también tenemos que configurar la dirección."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:97
#, fuzzy, no-wrap
msgid "Step 4 - Publishing movies to AMQP"
msgstr "Paso 4 - Publicar películas en AMQP"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:101
#, fuzzy
msgid "Now, it's time to send messages.  Create the `org.acme.MovieProducer` class with the following content:"
msgstr "Ahora, es el momento de enviar mensajes. Crea la clase `org.acme.MovieProducer` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:108
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:111
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:118
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"movies-out\")\n"
"    Emitter<Movie> emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:123
#, no-wrap
msgid ""
"    public void send(Movie movie) {\n"
"        emitter.send(movie);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:128
#, fuzzy
msgid "In this class, we inject an `Emitter,` i.e., an object responsible for sending a message to a channel.  This emitter is attached to the `movies-out` channel (and will send messages to AMQP).  The connector automatically encoded the content as JSON and set the `content-type` header."
msgstr "En esta clase, inyectamos un `Emitter,`, es decir, un objeto responsable de enviar un mensaje a un canal. Este emisor se adjunta al canal `movies-out` (y enviará los mensajes a AMQP). El conector codifica automáticamente el contenido como JSON y establece la cabecera `content-type`."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:130
#, fuzzy
msgid "You need to make sure your payload can be encoded to JSON."
msgstr "Tienes que asegurarte de que tu carga útil puede ser codificada en JSON."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:132
#, fuzzy
msgid "So, the rest of our application can use the `send` method to send a movie to our AMQP destination."
msgstr "Así, el resto de nuestra aplicación puede utilizar el método `send` para enviar una película a nuestro destino AMQP."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:133
#, fuzzy, no-wrap
msgid "Step 5 - Consuming movies"
msgstr "Paso 5 - Consumir películas"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:136
#, fuzzy
msgid "Let's now look at the other side and retrieve the movies from AMQP."
msgstr "Veamos ahora el otro lado y recuperemos las películas de AMQP."

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:143
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:145
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:148
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MovieConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:150
#, no-wrap
msgid "    private final Logger logger = Logger.getLogger(MovieConsumer.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:156
#, no-wrap
msgid ""
"    @Incoming(\"movies-in\")\n"
"    public void receive(Movie movie) {\n"
"        logger.infof(\"Got a movie: %d - %s\", movie.year, movie.title);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:159
#, fuzzy
msgid "Here, we use the `@Incoming` annotation to indicate to Quarkus to call the `receive` method for every received record."
msgstr "Aquí, utilizamos la anotación `@Incoming` para indicar a Quarkus que llame al método `receive` para cada registro recibido."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:161
#, fuzzy
msgid "Remember, the movie is encoded into JSON, so we need to help the connector produce a `Movie` from the received JSON."
msgstr "Recuerda que la película está codificada en JSON, por lo que tenemos que ayudar al conector a producir un `Movie` a partir del JSON recibido."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:163
#, fuzzy
msgid "Create the `org.acme.JsonToObjectConverter` class with the following content:"
msgstr "Cree la clase `org.acme.JsonToObjectConverter` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:172
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.MessageConverter;\n"
"import io.smallrye.reactive.messaging.amqp.IncomingAmqpMetadata;\n"
"import io.vertx.core.json.JsonObject;\n"
"import org.eclipse.microprofile.reactive.messaging.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:175
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.lang.reflect.Type;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:178
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class JsonToObjectConverter implements MessageConverter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:184
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean canConvert(Message<?> in, Type target) {\n"
"        return in.getMetadata(IncomingAmqpMetadata.class)\n"
"                .map(meta -> meta.getContentType().equals(\"application/json\")  && target instanceof Class)\n"
"                .orElse(false);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:186
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:192
#, no-wrap
msgid ""
"    @Override\n"
"    public Message<?> convert(Message<?> in, Type target) {\n"
"        return in.withPayload(((JsonObject) in.getPayload()).mapTo((Class<?>) target));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:198
#, fuzzy
msgid "This class is a _converter_.  It maps the content of a `Message` to another type.  In the `canConvert` method, we verify that the incoming message is coming from AMQP (so contain the `IncomingAmqpMetadata` metadata) and that the content-type is set to `application/json`.  The `convert` method maps the received `JsonObject` into the target type (`Movie` in our case)."
msgstr "Esta clase es un _convertidor_. Mapea el contenido de un `Message` a otro tipo. En el método `canConvert`, verificamos que el mensaje entrante proviene de AMQP (por lo que contiene los metadatos `IncomingAmqpMetadata` ) y que el content-type está establecido en `application/json`. El método `convert` mapea el `JsonObject` recibido al tipo de destino ( `Movie` en nuestro caso)."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:200
#, fuzzy
msgid "With this converter, our `consume` method will receive the `Movie` objects."
msgstr "Con este convertidor, nuestro método `consume` recibirá los objetos `Movie`."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:201
#, fuzzy, no-wrap
msgid "Step 6 - Sending movies from a REST endpoint"
msgstr "Paso 6 - Envío de películas desde un punto final REST"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:205
#, fuzzy
msgid "It's quite common to send messages to AMQP from a REST endpoint.  To do this, create the `org.acme.MovieResource` class with the following content:"
msgstr "Es bastante común enviar mensajes a AMQP desde un endpoint REST. Para ello, crea la clase `org.acme.MovieResource` con el siguiente contenido:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:217
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:222
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class MovieResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:225
#, no-wrap
msgid ""
"    @Inject\n"
"    MovieProducer producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:233
#, no-wrap
msgid ""
"    @POST\n"
"    public Response send(Movie movie) {\n"
"        producer.send(movie);\n"
"        // Return an 202 - Accepted response.\n"
"        return Response.accepted().build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:237
#, fuzzy
msgid "This class uses the `MovieProducer` we implemented above to send the `movies`.  You could also use an `Emitter` directly."
msgstr "Esta clase utiliza el `MovieProducer` que implementamos anteriormente para enviar el `movies`. También se podría utilizar un `Emitter` directamente."

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:238
#, fuzzy, no-wrap
msgid "Step 7 - Let's get this running!"
msgstr "Paso 7 - ¡Pongamos esto en marcha!"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:242
#, fuzzy
msgid "Well, first, we need an AMQP broker, for example http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis].  You can follow the http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Getting Started with Artemis] documentation, or use the following `docker-compose.yaml` file:"
msgstr "Bien, primero necesitamos un broker AMQP, por ejemplo  link:http://activemq.apache.org/components/artemis/[Apache ActiveMQ Artemis]. Puedes seguir la documentación de  link:http://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Getting Started with Artemis], o utilizar el siguiente archivo `docker-compose.yaml`:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:246
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:248
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:258
#, no-wrap
msgid ""
"  artemis:\n"
"    image: vromero/activemq-artemis:2-alpine-latest\n"
"    ports:\n"
"      - \"5672:5672\"\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"    environment:\n"
"      ARTEMIS_USERNAME: quarkus\n"
"      ARTEMIS_PASSWORD: quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:261
#, fuzzy
msgid "Copy the `docker-compose.yaml` file in your project, and from a terminal, start your broker with: `docker-compose up -d'"
msgstr "Copie el archivo `docker-compose.yaml` en su proyecto, y desde un terminal, inicie su corredor con `docker-compose up -d'"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:263
#, fuzzy
msgid "Then, run the application using:"
msgstr "A continuación, ejecute la aplicación con:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:267
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:271
#, fuzzy
msgid "The application runs in dev mode, meaning that you can still update the code.  It will reload it automatically."
msgstr "La aplicación se ejecuta en modo de desarrollo, lo que significa que todavía puede actualizar el código. Se recargará automáticamente."

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:273
#, fuzzy
msgid "In another terminal, emit a few HTTP POST request such as:"
msgstr "En otro terminal, emita algunas peticiones HTTP POST como:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:280
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"The Shawshank Redemption\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:285
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1972, \"title\":\"The Godfather\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:290
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2008, \"title\":\"The Dark Knight\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:295
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":1994, \"title\":\"Pulp Fiction\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:300
#, no-wrap
msgid ""
"curl --header \"Content-Type: application/json\" \\\n"
"--request POST \\\n"
"--data '{\"year\":2010, \"title\":\"Inception\"}' \\\n"
"http://localhost:8080/\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:303
#, fuzzy
msgid "In the terminal running the application, you will see:"
msgstr "En el terminal que ejecuta la aplicación, verás:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:310
#, no-wrap
msgid ""
"...\n"
"2021-01-27 09:29:41,087 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 1994 - Pulp Fiction\n"
"2021-01-27 09:29:41,114 INFO  [org.acm.MovieConsumer] (vert.x-eventloop-thread-9) Got a movie: 2010 - Inception\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:313
#, fuzzy
msgid "It works!"
msgstr "¡Funciona!"

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:314
#, fuzzy, no-wrap
msgid "Step 8 - Native packaging"
msgstr "Paso 8 - Embalaje nativo"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:317
#, fuzzy
msgid "If you have https://quarkus.io/guides/building-native-image[GraalVM installed and configured correctly], you can package this application as a native executable:"
msgstr "Si tienes  link:https://quarkus.io/guides/building-native-image[GraalVM instalado y configurado correctamente], puedes empaquetar esta aplicación como un ejecutable nativo:"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:321
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:324
#, fuzzy
msgid "Then, execute your native executable with: `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner`, and you get a Quarkus application using AMQP starting in a few milliseconds and consuming a ridiculous amount of memory: only 33Mb after 100 ingested records!"
msgstr "A continuación, ejecute su ejecutable nativo con: `./target/getting-started-amqp-1.0.0-SNAPSHOT-runner`, y obtienes una aplicación Quarkus usando AMQP que se inicia en unos pocos milisegundos y consume una cantidad ridícula de memoria: ¡sólo 33Mb después de 100 registros ingeridos!"

#. type: delimited block -
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:330
#, no-wrap
msgid ""
"$ rss getting-started-amqp-1.0.0-SNAPSHOT-runner\n"
"PID 0M COMMAND\n"
"54986 33M ./target/getting-started-amqp-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:332
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2021-02-02-getting-started-amqp.adoc:335
#, fuzzy
msgid "In less than 10 minutes, we have a new Quarkus application using AMQP.  If you want to go further, check the https://quarkus.io/guides/amqp[AMQP guide]."
msgstr "En menos de 10 minutos, tenemos una nueva aplicación Quarkus usando AMQP. Si quieres ir más allá, consulta la  link:https://quarkus.io/guides/amqp[guía de AM]QP."

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Getting Started with AMQP in your Quarkus application\n"
#~ "date: 2021-02-02\n"
#~ "tags: amqp\n"
#~ "synopsis: How to build a Quarkus application using AMQP in less than 10 minutes\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Cómo empezar con AMQP en su aplicación Quarkus\n"
#~ "date: 2021-02-02\n"
#~ "tags: amqp\n"
#~ "synopsis: Cómo construir una aplicación Quarkus usando AMQP en menos de 10 minutos\n"
#~ "author: cescoffier\n"
#~ "---\n"
