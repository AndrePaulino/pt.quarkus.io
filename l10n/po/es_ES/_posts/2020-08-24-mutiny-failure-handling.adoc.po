# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:8
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: 'How to handle failures with Mutiny'\n"
"date: 2020-08-24\n"
"tags: reactive mutiny\n"
"synopsis: Failures are an inherent part of any software. This post explains how you handle them with Mutiny\n"
"author: cescoffier\n"
"---\n"
msgstr ""
"layout: post\n"
"title: Cómo manejar los fracasos con Mutiny\n"
"date: 2020-08-24\n"
"tags: reactive mutiny\n"
"synopsis: Los fallos son una parte inherente de cualquier software. Este post explica cómo manejarlos con Mutiny\n"
"author: cescoffier\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:11
#, fuzzy
msgid "In the past week, I got several questions about failure handling with Mutiny. So, maybe it deserves a bit more explanation."
msgstr "La semana pasada, recibí varias preguntas sobre la gestión de fallos con Mutiny. Así que, tal vez merezca un poco más de explicación."

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:12
#, fuzzy, no-wrap
msgid "Failures are events"
msgstr "Los fracasos son acontecimientos"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:15
#, fuzzy
msgid "First, Mutiny is an event-driven reactive programming library. With Mutiny, you handle events. An upstream `Uni` or `Multi` propagates these events and gives you the possibility to process them. These events can be *item*, *completion*, *cancellation*, and... *failure*:"
msgstr "En primer lugar, Mutiny es una biblioteca de programación reactiva basada en eventos. Con Mutiny, usted maneja eventos. Un `Uni` o `Multi` propaga estos eventos y le da la posibilidad de procesarlos. Estos eventos pueden ser de *elemento*, de *finalización*, de *cancelación* y... de *fracaso*:"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:24
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onItem().invoke(i -> System.out.println(\"Received item \" + i))\n"
"    .onCompletion().invoke(() -> System.out.println(\"We are done!\"))\n"
"    .onCancellation().invoke(() -> System.out.println(\n"
"        \"The downstream does not want our items anymore!\")\n"
"    )\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:28
#, no-wrap
msgid ""
"    .onFailure().invoke(t -> System.out.println(\n"
"        \"Oh no! We received a failure: \" + t.getMessage())\n"
"    )\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:30
#, fuzzy, no-wrap
msgid "What can you do when you receive a failure?"
msgstr "¿Qué puede hacer cuando recibe un fallo?"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:33
#, fuzzy
msgid "In addition to calling an action, as shown in the previous snippet, there are multiple things you can do when you receive a failure."
msgstr "Además de llamar a una acción, como se muestra en el fragmento anterior, hay varias cosas que puede hacer cuando recibe un fallo."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:35
#, fuzzy
msgid "The most common thing to do is to recover. You can recover by passing a specific item or with another `Uni`:"
msgstr "Lo más habitual es recuperar. Se puede recuperar pasando un elemento específico o con otro `Uni`:"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:41
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithItem(failure -> \"hello (fallback)\")\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:45
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithUni(failure -> getAnotherUni(failure))\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:48
#, fuzzy
msgid "On Multi, you can also recover by providing another `Multi` or completing the stream:"
msgstr "En Multi, también puede recuperarse proporcionando otro `Multi` o completando el flujo:"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:53
#, no-wrap
msgid ""
"upstream\n"
"  .onFailure().recoverWithCompletion();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:56
#, fuzzy
msgid "If you have faith in your system, you can also *retry*. Note that you need to make sure you can retry the operation safely first!"
msgstr "Si tienes fe en tu sistema, también puedes *volver a intentarlo*. Ten en cuenta que primero debes asegurarte de que puedes reintentar la operación de forma segura."

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:63
#, no-wrap
msgid ""
"upstream\n"
"      .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).atMost(10)\n"
"      .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:66
#, fuzzy
msgid "You can also transform the failure. For example, you can map a low-level failure into something more business-friendly. It propagates that second failure downstream, hiding the low-level failure:"
msgstr "También puede transformar el fallo. Por ejemplo, puedes mapear un fallo de bajo nivel en algo más amigable para el negocio. Propaga ese segundo fallo aguas abajo, ocultando el fallo de bajo nivel:"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:71
#, no-wrap
msgid ""
"Uni.createFrom().failure(new IOException(\"boom\"))\n"
"      .onFailure().transform(t -> new BusinessException(t))\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:73
#, fuzzy, no-wrap
msgid "Failures are terminal"
msgstr "Los fallos son terminales"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:76
#, fuzzy
msgid "Failures are terminal events. If your upstream propagates a failure, it means it can't operate normally. For Uni, that's not a problem, as you can only have an item or a failure. But for multi, it's a bit more complicated."
msgstr "Los fallos son eventos terminales. Si su corriente ascendente propaga un fallo, significa que no puede operar normalmente. Para Uni, eso no es un problema, ya que sólo puedes tener un elemento o un fallo. Pero para multi, es un poco más complicado."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:78
#, fuzzy
msgid "Even if you recover, by handling the failure, you won't get the rest of the stream. Your upstream is ... *kaputt*."
msgstr "Incluso si se recupera, por el manejo de la falla, no obtendrá el resto de la corriente. Su río arriba es ... *kaputt*."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:80
#, fuzzy
msgid "Let's take the following code:"
msgstr "Tomemos el siguiente código:"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:94
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"      .onItem().invoke(v -> {\n"
"              if (v == 7) {\n"
"                throw new IllegalArgumentException(\"We don't like seven!\");\n"
"              }\n"
"      })\n"
"      .onFailure().recoverWithItem(7)\n"
"      .map(integer -> integer.toString())\n"
"      .onItem().invoke(s -> System.out.println(s))\n"
"      .collectItems().asList()\n"
"      .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:97
#, fuzzy
msgid "It produces [1, 2, 3, 4, 5, 6, 7] and not the rest of the stream. When the `onItem().invoke()` stage is called with `7`, it produces a failure. That stops the stream. It does not process more items from upstream."
msgstr "Produce [1, 2, 3, 4, 5, 6, 7] y no el resto del flujo. Cuando se llama a la etapa `onItem().invoke()` con `7`, se produce un fallo. Esto detiene el flujo. No procesa más elementos de la cadena."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:99
#, fuzzy
msgid "So what can we do? Isolate!"
msgstr "Entonces, ¿qué podemos hacer? Aislarnos."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:101
#, fuzzy
msgid "When a *stage* sends a failure, it sends a failure terminating the stream and cancels its subscription to the upstream (informing that it does not need more items as it's not operating correctly). So, if we need to continue processing the other items from upstream; we just need to isolate that failure and be sure we do not cancel our subscription to the upstream."
msgstr "Cuando una *etapa* envía un fallo, envía un fallo terminando el flujo y cancela su suscripción al upstream (informando que no necesita más elementos ya que no está operando correctamente). Por lo tanto, si necesitamos seguir procesando los demás elementos del flujo ascendente, sólo tenemos que aislar ese fallo y asegurarnos de no cancelar nuestra suscripción al flujo ascendente."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:103
#, fuzzy
msgid "The most common approach to achieve this is the following:"
msgstr "El enfoque más común para conseguirlo es el siguiente:"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:121
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"    .onItem().transformToUniAndConcatenate(i ->\n"
"            // Isolate the failure in this block\n"
"            Uni.createFrom().item(i)\n"
"                    .onItem().invoke(v -> {\n"
"                        if (v == 7) {\n"
"                            throw new IllegalArgumentException(\"We don't like seven!\");\n"
"                        }\n"
"                    })\n"
"                    .onFailure().recoverWithItem(7)\n"
"    )\n"
"    .map(integer -> integer.toString())\n"
"    .onItem().invoke(s -> System.out.println(s))\n"
"    .collectItems().asList()\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:124
#, fuzzy
msgid "Basically, we isolate the potentially failing operation. If it fails, we recover. But the cancellation only cancels that item, not the full stream, meaning we will receive the next one item and so on. This code produces the expected list."
msgstr "Básicamente, aislamos la operación que podría fallar. Si falla, nos recuperamos. Pero la cancelación sólo cancela ese elemento, no todo el flujo, lo que significa que recibiremos el siguiente elemento y así sucesivamente. Este código produce la lista esperada."

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:125
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:128
#, fuzzy
msgid "Here you go, you can now handle failure and continue the streams gracefully."
msgstr "Aquí tienes, ahora puedes manejar el fracaso y continuar los flujos con gracia."

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:130
#, fuzzy
msgid "If you want to know more about Mutiny, check the following video:"
msgstr "Si quiere saber más sobre el motín, consulte el siguiente vídeo:"

#. type: delimited block +
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:133
#, fuzzy, no-wrap
msgid "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"
msgstr "&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;"
