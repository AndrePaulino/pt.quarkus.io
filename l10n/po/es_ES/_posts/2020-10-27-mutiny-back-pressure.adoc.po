# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-27"
msgstr "2020-10-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "Cómo funciona el control de flujo con Mutiny"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny streams"
msgstr "flujos de motín reactivo"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "Motín - Control de flujo y contrapresión"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:13
#, fuzzy
msgid "Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.  It supports failure handling, both sequential and parallel operation composition, and plenty of operators.  Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "La programación reactiva ofrece una forma elegante, flexible y potente de escribir código asíncrono. Soporta el manejo de fallos, la composición de operaciones tanto secuenciales como paralelas, y un montón de operadores. La programación reactiva promueve los flujos de datos como una construcción primaria, y su código está observando los flujos y reaccionando a las señales."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:14
#, fuzzy, no-wrap
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)   "
msgstr "Orígenes de la contrapresión https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, fuzzy, no-wrap
msgid "800"
msgstr "800"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-origin.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:19
#, fuzzy
msgid "However, using data streams as primary constructs does not come without some issues.  One of the main problems is the need for flow control."
msgstr "Sin embargo, el uso de flujos de datos como construcciones primarias no viene sin algunos problemas. Uno de los principales problemas es la necesidad de control de flujo."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:21
#, fuzzy
msgid "## The producer/consumer problem"
msgstr "El problema del productor/consumidor"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:25
#, fuzzy
msgid "Let's imagine a fast producer and a slow consumer.  The producer sends events too quickly for the consumer that can't keep up.  That phenomenon is remarkably well illustrated in the following picture."
msgstr "Imaginemos un productor rápido y un consumidor lento. El productor envía eventos demasiado rápido para el consumidor que no puede seguir el ritmo. Este fenómeno se ilustra muy bien en la siguiente imagen."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:26
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Sin contrapresión https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-no.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:31
#, fuzzy
msgid "Let's see some code.  Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "Veamos algo de código. Imagina un productor que emite un evento cada diez milisegundos, mientras que el consumidor sólo puede consumir uno por segundo."

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:41
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BackPressureExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:44
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "Si ejecutas ese código, verás que el abonado recibe un `MissingBackPressureFailure,` indicando que la bajada no puede seguir el ritmo:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:49
#, no-wrap
msgid ""
"Got item: 0\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Could not emit tick 16 due to lack of requests\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:52
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "emitOn"

#. type: delimited block =
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:57
#, fuzzy
msgid "In the previous code, you may wonder about the `emitOn.` It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.  Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "En el código anterior, es posible que te preguntes por el operador `emitOn.` It's a Mutiny que permite controlar en qué hilo el Subscriber recibe los eventos. La contrapresión es a menudo necesaria cuando hay varios hilos involucrados, ya que en un enfoque de un solo hilo, el bloqueo del hilo bloquearía la fuente, lo que puede tener consecuencias dramáticas."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:60
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "Entonces, ¿qué podemos hacer para gestionar este _desbordamiento_?"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:62
#, fuzzy
msgid "### Buffering items"
msgstr "Elementos de amortiguación"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:65
#, fuzzy
msgid "The first natural solution uses buffers.  The consumer can buffer the events, so it does not fail:"
msgstr "La primera solución natural utiliza los buffers. El consumidor puede amortiguar los eventos, por lo que no falla:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:66
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "Amortiguación para evitar abrumar a los consumidores posteriores"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:67
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-buffer.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:71
#, fuzzy
msgid "Using a buffer allows handling small bumps, but it's not a long term solution.  If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "El uso de un buffer permite manejar pequeños baches, pero no es una solución a largo plazo. Si actualizamos el código para usar un buffer grande, el consumidor puede manejar más eventos pero eventualmente falla:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:82
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().buffer(250)\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BufferingExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:90
#, no-wrap
msgid ""
"Got item: 0\n"
"Got item: 1\n"
"Got item: 2\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Buffer is full due to lack of downstream consumption\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:95
#, fuzzy
msgid "You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.  What about unbounded buffers? In general, that's a terrible idea as you may run out of memory."
msgstr "Se puede imaginar aumentar el tamaño del búfer, pero es difícil anticipar el valor óptimo. ¿Qué pasa con los búferes no limitados? En general, es una idea terrible, ya que puedes quedarte sin memoria."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:97
#, fuzzy
msgid "### Dropping items"
msgstr "Dejar caer los artículos"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:99
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "Otra solución consiste en dejar caer elementos:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:100
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "Dejar de lado los artículos para no abrumar a los consumidores posteriores"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:101
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-drop.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:104
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "Puede dejar los artículos recibidos más recientes o los más antiguos:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:116
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().drop(x -> System.out.println(\"Dropping item \" + x))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(DropExample::canOnlyConsumeOneItemPerSecond)\n"
"    .transform().byTakingFirstItems(10)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:129
#, no-wrap
msgid ""
"// ....\n"
"Dropping item 997\n"
"Dropping item 998\n"
"Dropping item 999\n"
"Dropping item 1000\n"
"Dropping item 1001\n"
"Dropping item 1002\n"
"Dropping item 1003\n"
"Got item: 9\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:134
#, fuzzy
msgid "Dropping items provides a sustainable solution to our problem, but we are losing events! As we can see in the previous output, we may drop the high majority of items.  In many cases, this is not acceptable."
msgstr "Dejar caer los artículos proporciona una solución sostenible a nuestro problema, ¡pero estamos perdiendo eventos! Como podemos ver en el resultado anterior, podemos dejar caer la gran mayoría de los artículos. En muchos casos, esto no es aceptable."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:137
#, fuzzy
msgid "So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.  We need flow control."
msgstr "Por lo tanto, necesitamos otra solución, una solución en la que el ritmo general se ajuste para satisfacer el elemento más lento de la tubería. Necesitamos un control de flujo."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:139
#, fuzzy
msgid "### What the heck is Back-Pressure?"
msgstr "¿Qué es la presión de espalda?"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:144
#, fuzzy
msgid "You may have seen this term many times, and often associated with Reactive.  In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.  That control can use reducers or bends.  While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "Es posible que haya visto este término muchas veces, y a menudo se asocia con Reactivo. En mecánica, la contrapresión es una forma de controlar el flujo de fluido a través de las tuberías, lo que provoca una caída de presión. Ese control puede utilizar reductores o codos. Aunque es muy interesante, si se trata de un fontanero, no está claro cómo puede ayudarnos aquí..."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:147
#, fuzzy
msgid "We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.  We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "Podemos ver nuestras corrientes como un flujo de fluido, y el conjunto de etapas (operador o abonado) forma una tubería. Queremos que el flujo de fluido sea lo menos friccionado posible, sin remolinos ni ondas."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:150
#, fuzzy
msgid "An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.  Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "Una característica interesante de la mecánica de fluidos es cómo una reducción del caudal aguas abajo afecta a las aguas arriba. Esencialmente, eso es lo que necesitamos: una forma de que los operadores y abonados de aguas abajo reduzcan el rendimiento, no sólo localmente sino también aguas arriba."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:156
#, fuzzy
msgid "Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.  One of the most brilliant usages of back-pressure is in TCP.  A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.  That way, the reader is never overwhelmed.  But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "No te equivoques; la contrapresión no es algo nuevo en el mundo de la informática y no se limita a Reactive. Uno de los usos más brillantes de la contrapresión es en TCP. Un lector, que recibe datos, puede bloquear al escritor, al otro lado del cable, si no lee los datos enviados. De este modo, el lector nunca se ve desbordado. Pero hay que entender las consecuencias: bloquear al escritor puede tener efectos secundarios."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:160
#, fuzzy
msgid "There are other back-pressure implementations.  AMQP uses a credit-based flow control, where you can only send if you have enough credit.  Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "Hay otras implementaciones de contrapresión. AMQP utiliza un control de flujo basado en el crédito, donde sólo se puede enviar si se tiene suficiente crédito. La contrapresión de Eclipse Vert.x se basa en la pausa/reanudación, donde un consumidor puede pausar el flujo ascendente hasta que se ponga al día y reanudarlo una vez que vuelva a estar en marcha."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:162
#, fuzzy
msgid "### Introducing Reactive Streams"
msgstr "Presentación de los flujos reactivos"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:167
#, fuzzy
msgid "Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].  It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.  With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.  The `Publisher` cannot send more than the requested amount of items:"
msgstr "Centrémonos ahora en otro protocolo de contrapresión:  link:https://www.reactive-streams.org/[Reactive Streams]. Define un protocolo asíncrono y de contrapresión que se adapta a nuestro problema de productor rápido/consumidor lento. Con Reactive Streams, el consumidor, llamado `Subscriber`, solicita elementos al productor, llamado `Publisher`. El `Publisher` no puede enviar más que la cantidad de elementos solicitados:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:168
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Presión de retorno de las corrientes reactivas https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:173
#, fuzzy
msgid "When the items are received and processed, the consumer can request more items, and so on.  Thus, the consumer controls the flow."
msgstr "Cuando se reciben y procesan los artículos, el consumidor puede solicitar más artículos, y así sucesivamente. Así, el consumidor controla el flujo."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:174
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "Utilizar el control de flujo para evitar abrumar a los consumidores"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:175
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-flow-control.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:178
#, fuzzy
msgid "### Reactive Streams entities"
msgstr "Entidades de Streams Reactivos"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:185
#, fuzzy
msgid "To implement that protocol, Reactive Streams define a set of entities.  First, a `Subscriber` is a consumer.  It subscribes to a `Publisher,` producing items.  Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.  This `Subscription` is a contract.  With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "Para implementar ese protocolo, Reactive Streams define un conjunto de entidades. En primer lugar, un `Subscriber` es un consumidor. Se suscribe a un `Publisher,` que produce elementos. A continuación, el `Publisher` envía, de forma asíncrona, un objeto `Subscription` al `Subscriber`. Este `Subscription` es un contrato. Con este `Subscription,`, el `Subscriber` puede solicitar artículos y cancela la suscripción cuando no quiere más artículos."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:186
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "Ejemplo de interacciones entre un `Subscriber` y un `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:187
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-sequence.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:190
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr "Un `Publisher` no puede enviar más artículos de los solicitados al `Subscriber,` y el `Subscriber` puede solicitar más artículos en cualquier momento."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:193
#, fuzzy
msgid "It is essential to understand that the requests and emissions are not necessarily happening synchronously.  A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "Es esencial entender que las peticiones y las emisiones no se producen necesariamente de forma sincrónica. Un `Subscriber` puede solicitar tres elementos, y el Editor enviará uno por uno cuando estén disponibles."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:197
#, fuzzy
msgid "Reactive Streams introduces another entity named `Processor.` A `Processor` is a `Subscriber` and a `Publisher` simultaneously.  In other words, it's a link in our pipeline:"
msgstr "Reactive Streams introduce otra entidad llamada `Processor.` Un `Processor` es un `Subscriber` y un `Publisher` simultáneamente. En otras palabras, es un enlace en nuestro pipeline:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:198
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "Ejemplo de interacciones entre un `Subscriber,` un `Processor` y un `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:199
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/pipeline-with-processor.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:210
#, fuzzy
msgid "A `Subscriber` calls `subscribe` on a `Processor.` Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).  When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.  All these interactions are asynchronous.  When this handshake completes, the `Subscriber` can start requesting items.  The Processor is responsible for mediating the `Subscriber` requests with its upstream.  For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.  Of course, depending on the `Processor` code, it may not be that simple.  What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "Un `Subscriber` llama a `subscribe` en un `Processor.` Antes de recibir un `Subscription,`, el `Processor` se suscribe a su propio upstream (el `Publisher` de la imagen anterior). Cuando ese ascendente proporciona un `Subscription` a nuestro procesador, éste puede dar un `Subscription` al suscriptor. Todas estas interacciones son asíncronas. Cuando este apretón de manos se completa, el `Subscriber` puede empezar a solicitar elementos. El procesador se encarga de mediar en las peticiones de `Subscriber` con sus ascendentes. Por ejemplo, como se ilustra en la imagen anterior, si el `Subscriber` requiere dos elementos, el `Processor` también solicita dos elementos a su propio ascendente. Por supuesto, dependiendo del código de `Processor`, puede no ser tan sencillo. Lo que es fundamental es que cada `Publisher` y `Processor` haga cumplir las peticiones de flujo para no sobrecargar nunca a los suscriptores de aguas abajo."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:212
#, fuzzy
msgid "### Be warned; it's a trap!"
msgstr "Estáis advertidos, es una trampa."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:217
#, fuzzy
msgid "If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.  Be warned; it's a trap! Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.  Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "Si miras la  link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[API de Reactive Streams], lo encontrarás sencillo. Pero, ¡está advertido, es una trampa! Detrás de esta aparente simplicidad, implementar las entidades de Reactive Streams por ti mismo es una pesadilla. Los Reactive Streams vienen con un amplio conjunto de reglas y un estricto TCK."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:221
#, fuzzy
msgid "But, no worries, Mutiny implements the Reactive Streams protocol for you.  In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.  All the subscription handshakes and requests negotiations are done for you."
msgstr "Pero, no te preocupes, Mutiny implementa el protocolo Reactive Streams por ti. En otras palabras, cuando se utiliza `Multi,` se está utilizando un `Publisher` siguiendo el protocolo Reactive Streams. Todos los apretones de manos de la suscripción y las negociaciones de las peticiones se hacen por ti."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:223
#, fuzzy
msgid "### Looking under the hood"
msgstr "Mirando bajo el capó"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:226
#, fuzzy
msgid "I knew it! You are curious! You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "¡Lo sabía! ¡Tienes curiosidad! Puedes utilizar `onSubscribe().invoke()` y `onRequest().invoke()` para comprobar lo que ocurre:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:238
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .transform().byFilteringItemsWith(i -> i % 2 == 0)\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            i -> System.out.println(\"i: \" + i)\n"
");\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:240
#, no-wrap
msgid "You can also go a step further and not only observing but also controlling the flow yourself:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:242
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:265
#, no-wrap
msgid "[source, java, indent=0]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:260
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            subscription -> {\n"
"                // Got the subscription\n"
"                upstream.set(subscription);\n"
"                subscription.request(1);\n"
"            },\n"
"            i -> {\n"
"                System.out.println(\"i: \" + i);\n"
"                upstream.get().request(1);\n"
"            },\n"
"            f -> System.out.println(\"Failed with \" + f),\n"
"            () -> System.out.println(\"Completed\")\n"
");\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Suscripción recibida: \" + sub)) .onRequest().invoke(req → System.out.println(\"Tengo una solicitud: \" + req)) .onItem().transform(i → i * 100) .subscribe().with( subscription → { // Got the subscription upstream.set(subscription); subscription.request(1); }, i → { System.out.println(\"i: \" + i); upstream.get().request(1); }, f → System.out.println(\"Failed with \" + f), () → System.out.println(\"Completed\") );"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:263
#, no-wrap
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:271
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().withSubscriber(new Subscriber<Integer>() {\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Suscripción recibida: \" + sub)) .onRequest().invoke(req → System.out.println(\"Tengo una solicitud: \" + req)) .onItem().transform(i → i * 100) .subscribe().withSubscriber(new Subscriber&lt;Integer&gt;() {"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:273
#, fuzzy, no-wrap
msgid "        private Subscription subscription;\n"
msgstr "<pre>suscripción privada;</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:279
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onSubscribe(Subscription s) {\n"
"            this.subscription = s;\n"
"            s.request(1);\n"
"        }\n"
msgstr ""
"<pre>@Override\n"
"public void onSubscribe(Subscription s) {\n"
"    this.subscription = s;\n"
"    s.request(1);\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:285
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onNext(Integer item) {\n"
"            System.out.println(\"Got item \" + item);\n"
"            subscription.request(1);\n"
"        }\n"
msgstr ""
"<pre>@Override\n"
"public void onNext(Integer item) {\n"
"    System.out.println(\"Tengo el elemento \" + elemento);\n"
"    subscription.request(1);\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:290
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onError(Throwable t) {\n"
"            // ...\n"
"        }\n"
msgstr ""
"<pre>@Override\n"
"public void onError(Throwable t) {\n"
"    // ...\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:297
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");\n"
msgstr ""
"<pre>        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:298
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:301
#, fuzzy
msgid "### Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:311
#, fuzzy
msgid "This post described the different approaches offered by Mutiny to handle back-pressure.  The Reactive Streams protocol works well when you can control the pace of the upstream.  But it's not always the case.  Streams representing physical entities are rarely controllable.  Imagine a stream emitting user's keystrokes.  You cannot ask the users to slow down.  That would be a terrible user experience.  As we have seen above, time is also not something we can slow down, unfortunately...  In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "Este post describe los diferentes enfoques que ofrece Mutiny para manejar la contrapresión. El protocolo Reactive Streams funciona bien cuando se puede controlar el ritmo de la corriente ascendente. Pero no siempre es el caso. Los flujos que representan entidades físicas rara vez son controlables. Imagina un flujo que emite las pulsaciones de los usuarios. No se puede pedir a los usuarios que vayan más despacio. Sería una experiencia terrible para el usuario. Como hemos visto anteriormente, el tiempo tampoco es algo que podamos ralentizar, por desgracia... En este caso, el grupo `onOverflow()` te permite decidir la mitigación, como el uso de búferes o la eliminación de elementos."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:314
#, fuzzy
msgid "It's critical to avoid overwhelming downstream subscribers.  It is the small crack that ripples in your system with dreadful consequences."
msgstr "Es fundamental evitar el agobio de los abonados. Es la pequeña grieta que ondula en su sistema con terribles consecuencias."

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Mutiny - Flow control and Back-pressure \n"
#~ "date: 2020-10-27\n"
#~ "tags: reactive mutiny streams\n"
#~ "synopsis: How does flow control works with Mutiny\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Motín - Control de flujo y contrapresión\n"
#~ "date: 2020-10-27\n"
#~ "tags: reactive mutiny streams\n"
#~ "synopsis: Cómo funciona el control de flujo con Mutiny\n"
#~ "author: cescoffier\n"
#~ "---\n"
