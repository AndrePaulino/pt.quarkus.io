# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "2020-12-01"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "How to send and receive Cloud Events with Quarkus, Kafka and Reactive Messaging"
msgstr "En el resto del post se explica cómo se pueden enviar y recibir eventos de la nube utilizando Quarkus, Kafka y Reactive Messaging."

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, no-wrap
msgid "reactive kafka"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "Sending and Receiving Cloud Events with Kafka"
msgstr "Envío de eventos de la nube en Kafka"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:13
#, fuzzy
msgid "https://cloudevents.io/[Cloud Events] is a specification for describing events.  It aims to ease interoperability.  With the rise of event-driven architecture, it's not surprising to see Cloud Events gaining popularity."
msgstr "link:https://cloudevents.io/[Cloud Events] es una especificación para describir eventos. Su objetivo es facilitar la interoperabilidad. Con el auge de la arquitectura basada en eventos, no es de extrañar que Cloud Events gane popularidad."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:15
#, fuzzy
msgid "This post explains how you can generate and consume Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "Este post explica cómo puedes generar y consumir Cloud Events usando Quarkus, Kafka y Reactive Messaging."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:16
#, fuzzy, no-wrap
msgid "What is Cloud Event?"
msgstr "¿Qué es Cloud Event?"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:23
#, fuzzy
msgid "First, let's look at the why.  Events are everywhere.  Many modern systems are using events one way or another.  Events can be used to implement event sourcing, communicate facts, trigger out-of-band processing, or send notifications.  Events become an essential piece of any system."
msgstr "En primer lugar, veamos el porqué. Los eventos están en todas partes. Muchos sistemas modernos utilizan los eventos de una forma u otra. Los eventos se pueden utilizar para implementar el abastecimiento de eventos, comunicar hechos, desencadenar el procesamiento fuera de banda o enviar notificaciones. Los eventos se convierten en una pieza esencial de cualquier sistema."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:29
#, fuzzy
msgid "Yet event publishers tend to describe events differently.  I don't mean the content is different, but the envelope and the event's format are heterogeneous, even if these events transit on the same event mesh.  Some applications choose JSON and encode everything in the event's payload; some other systems prefer binary formats, such as Avro or Protobuf, and use the protocol capability, such as headers or properties, to transport metadata about the wrapped payload.  While event-driven architecture claims to ease the integration with external systems, this disparity is doing the opposite.  It's not rare to need a specific event translator with the only purpose to adapt events from one format to another."
msgstr "Sin embargo, los editores de eventos tienden a describirlos de forma diferente. No me refiero a que el contenido sea diferente, sino a que la envoltura y el formato del evento son heterogéneos, aunque estos eventos transiten por la misma malla de eventos. Algunas aplicaciones eligen JSON y codifican todo en la carga útil del evento; otros sistemas prefieren formatos binarios, como Avro o Protobuf, y utilizan la capacidad del protocolo, como las cabeceras o las propiedades, para transportar metadatos sobre la carga útil envuelta. Aunque la arquitectura basada en eventos pretende facilitar la integración con sistemas externos, esta disparidad está haciendo lo contrario. No es raro que se necesite un traductor de eventos específico con el único propósito de adaptar los eventos de un formato a otro."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:36
#, fuzzy
msgid "So, what's Cloud Event? Cloud Event proposes a common way to describe events.  The goal is, obviously, interoperability and easing the integration burden.  Cloud Event 1.0 was released almost a year ago.  Over the past year, many Cloud Providers adopted this format, such as Azure and Oracle.  Several middlewares have also added support for Cloud Events, such as Knative, Kogito, Debezium, and Quarkus."
msgstr "¿Qué es Cloud Event? Cloud Event propone una forma común de describir los eventos. El objetivo es, obviamente, la interoperabilidad y facilitar la carga de integración. Cloud Event 1.0 se publicó hace casi un año. En el último año, muchos proveedores de nube adoptaron este formato, como Azure y Oracle. Varios middlewares también han añadido soporte para Cloud Events, como Knative, Kogito, Debezium y Quarkus."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:37
#, fuzzy, no-wrap
msgid "Show me some examples!"
msgstr "Muéstrame algunos ejemplos."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:40
#, fuzzy
msgid "Ok, so, how does it look? The easiest way to understand Cloud Event is to look at one of them:"
msgstr "Bien, entonces, ¿cómo se ve? La forma más fácil de entender el Evento Nube es mirar uno de ellos:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:54
#, no-wrap
msgid ""
"{\n"
"    \"specversion\" : \"1.0\",\n"
"    \"id\" : \"O234-345-890\",\n"
"    \"source\" : \"https://reactive-coffee-shop.io/1234/order\",\n"
"    \"type\" : \"me.escoffier.coffee.Order\",\n"
"    \"subject\" : \"order\",\n"
"    \"time\" : \"2020-11-25T09:05:00Z\",\n"
"    \"datacontenttype\" : \"application/json\",\n"
"    \"data\" : \"{\\\"name\\\": \\\"clement\\\", \\\"order\\\":\\\"espresso\\\"}\",\n"
"    \"custom-attribute\" : \"some custom value\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:58
#, fuzzy
msgid "This event is described in JSON, but that's just one of the possibilities.  Let's look at the fields."
msgstr "Este evento está descrito en JSON, pero esa es sólo una de las posibilidades. Veamos los campos."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:68
#, fuzzy
msgid "First, the `specversion` indicates which version of Cloud Event it is using (1.0).  The `id` field provides an id for that specific event.  The `source` attribute is a URI identifying the event source, i.e., the context in which an event happened or the application that emitted that specific event.  Combining the `id` and the `source` provides a unique identifier.  Such uniqueness is essential to implement idempotence and handle potential duplicates.  The `type` is the last mandatory attribute.  It indicates the _type_ of the event.  Here, I use the fully qualified class name, but you can imagine anything.  It should refer to the kind of event you have defined in your system."
msgstr "En primer lugar, el `specversion` indica qué versión de Cloud Event está utilizando (1.0). El campo `id` proporciona un id para ese evento específico. El atributo `source` es un URI que identifica la fuente del evento, es decir, el contexto en el que se produjo el evento o la aplicación que emitió ese evento específico. La combinación de `id` y `source` proporciona un identificador único. Esta unicidad es esencial para implementar la idempotencia y manejar posibles duplicados. El `type` es el último atributo obligatorio. Indica el _tipo_ de evento. Aquí, utilizo el nombre de clase completamente calificado, pero puedes imaginar cualquier cosa. Debe referirse al tipo de evento que hayas definido en tu sistema."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:75
#, fuzzy
msgid "The other attributes are optional.  `datacontenttype` defines the content-type of the `data` attribute.  `subject` allows passing extra details about the event, such as an additional hint about the context or the type of event.  `time` is a timestamp, generally indicating the creation time.  There is another optional attribute not used in my example.  The `dataschema` attribute lets you pass the schema of the event data."
msgstr "Los demás atributos son opcionales. `datacontenttype` define el tipo de contenido del atributo `data`. `subject` permite pasar detalles adicionales sobre el evento, como una pista adicional sobre el contexto o el tipo de evento. `time` es una marca de tiempo, que generalmente indica la hora de creación. Hay otro atributo opcional que no se utiliza en mi ejemplo. El atributo `dataschema` permite pasar el esquema de los datos del evento."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:78
#, fuzzy
msgid "The `data` attribute contains the wrapped business event.  It is an essential part, and the other attributes are just providing details about that specific business event."
msgstr "El atributo `data` contiene el evento envuelto. Es una parte esencial, y los otros atributos sólo proporcionan detalles sobre ese evento específico."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:81
#, fuzzy
msgid "You can also define _extensions_.  These extensions would be a set of custom attributes used when the proposed set of attributes is not enough for your use case."
msgstr "También puede definir _extensiones_. Estas extensiones serían un conjunto de atributos personalizados que se utilizan cuando el conjunto de atributos propuesto no es suficiente para su caso de uso."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:84
#, fuzzy
msgid "That's it! So, we can summarize Cloud Events as _just enough metadata to understand an event_ - its source, an id, a type, and the business data."
msgstr "Eso es todo. Por lo tanto, podemos resumir los Eventos de la Nube como _los metadatos suficientes para entender un evento_ - su fuente, un id, un tipo y los datos del negocio."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:85
#, fuzzy, no-wrap
msgid "Cloud Events on the wire - the bindings"
msgstr "Eventos en la nube en el cable - las ataduras"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:89
#, fuzzy
msgid "But, how would these events be encoded? The previous example using JSON is nice, but some protocols may want to leverage their own capabilities to transmit these metadata."
msgstr "Pero, ¿cómo se codificarían estos eventos? El ejemplo anterior que utiliza JSON está bien, pero algunos protocolos pueden querer aprovechar sus propias capacidades para transmitir estos metadatos."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:94
#, fuzzy
msgid "That's why Cloud Events also proposes bindings.  A binding is a set of recommendations specific to one protocol.  It explains how each protocol should encode Cloud Events.  For example, there is a binding for HTTP, one for Kafka, and another for AMQP."
msgstr "Por ello, Cloud Events también propone vinculaciones. Una vinculación es un conjunto de recomendaciones específicas para un protocolo. Explica cómo debe codificar Cloud Events cada protocolo. Por ejemplo, hay una vinculación para HTTP, otra para Kafka y otra para AMQP."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:96
#, fuzzy
msgid "Most of these bindings propose two approaches:"
msgstr "La mayoría de estas fijaciones proponen dos enfoques:"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:98
#, fuzzy
msgid "structured"
msgstr "estructurado"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:99
#, fuzzy
msgid "binary"
msgstr "binario"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:104
#, fuzzy
msgid "The structured approach keeps event metadata and data together in the payload of the message or request.  It generally uses JSON to encode that data.  If you pass the Cloud Event example (from above), in an HTTP request, it will use the structured mode.  It will also use the structured mode when you write that JSON snippet in a Kafka record's value."
msgstr "El enfoque estructurado mantiene los metadatos y los datos del evento juntos en la carga útil del mensaje o la solicitud. Generalmente utiliza JSON para codificar esos datos. Si pasas el ejemplo de Evento en la Nube (de arriba), en una petición HTTP, utilizará el modo estructurado. También utilizará el modo estructurado cuando escriba ese fragmento de JSON en el valor de un registro de Kafka."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:107
#, fuzzy
msgid "The structured approach allows simple forwarding across multiple protocols.  However, it may not be efficient and may constraint the type of business data."
msgstr "El enfoque estructurado permite un reenvío sencillo a través de múltiples protocolos. Sin embargo, puede no ser eficiente y puede limitar el tipo de datos empresariales."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:111
#, fuzzy
msgid "The other approach relies on protocol capabilities and enables efficient transfer and encoding.  If we use the binary mode with Kafka, we will store the `data` attribute value in the Kafka record's value and pass the other attributes using the record's headers.  Consequently, business data can be encoded using binary protocols such as Avro, leading to higher efficiency."
msgstr "El otro enfoque se basa en las capacidades del protocolo y permite una transferencia y codificación eficientes. Si utilizamos el modo binario con Kafka, almacenaremos el valor del atributo `data` en el valor del registro de Kafka y pasaremos los demás atributos utilizando las cabeceras del registro. En consecuencia, los datos empresariales pueden codificarse utilizando protocolos binarios como Avro, lo que permite una mayor eficiencia."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:113
#, fuzzy
msgid "The rest of the post explains how you can send and receive Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "En el resto del post se explica cómo se pueden enviar y recibir eventos de la nube utilizando Quarkus, Kafka y Reactive Messaging."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:114
#, fuzzy, no-wrap
msgid "Sending Cloud Events on Kafka"
msgstr "Envío de eventos de la nube en Kafka"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:118
#, fuzzy
msgid "The Kafka connector used by Quarkus has built-in support for Cloud Events.  It can send and consume Cloud Events using the structured mode (encoding everything in a JSON payload) or the binary mode (using Kafka headers)."
msgstr "El conector Kafka utilizado por Quarkus tiene soporte incorporado para Cloud Events. Puede enviar y consumir Cloud Events utilizando el modo estructurado (codificando todo en una carga útil JSON) o el modo binario (utilizando cabeceras Kafka)."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:120
#, fuzzy
msgid "To write your outgoing messages as Cloud Event, you only need to specify the `cloud-events-type` and `cloud-events-source` attributes on your channel:"
msgstr "Para escribir sus mensajes salientes como Cloud Event, sólo tiene que especificar los atributos `cloud-events-type` y `cloud-events-source` en su canal:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:129
#, no-wrap
msgid ""
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.generated-price.cloud-events-source=price-generators\n"
"mp.messaging.outgoing.generated-price.cloud-events-type=price\n"
"mp.messaging.outgoing.generated-price.cloud-events-subject=generated-prices\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:134
#, fuzzy
msgid "By default, the connector writes Cloud Events using the binary mode.  The connector generates a random `id` for each message.  You can also customize the other Cloud Event attributes using `cloud-events-$attribute`, such as `cloud-events-subject`."
msgstr "Por defecto, el conector escribe los Eventos de la Nube utilizando el modo binario. El conector genera un `id` aleatorio para cada mensaje. También puede personalizar los demás atributos de los Eventos en la Nube utilizando `cloud-events-$attribute`, como `cloud-events-subject`."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:138
#, fuzzy
msgid "The configuration shown above is applied to all the outgoing messages.  Sometimes, you want to customize the value for each message individually.  To achieve this, you can also attach `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` to your message to customize the id, source, type and subject for each message:"
msgstr "La configuración mostrada arriba se aplica a todos los mensajes salientes. A veces, se desea personalizar el valor de cada mensaje individualmente. Para conseguirlo, también puede adjuntar `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` a su mensaje para personalizar el id, la fuente, el tipo y el asunto de cada mensaje:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:149
#, no-wrap
msgid ""
"@Outgoing(\"cloud-events\")\n"
"public Message<String> toCloudEvents(Message<String> in) {\n"
"    return in.addMetadata(OutgoingCloudEventMetadata.builder()\n"
"      .withId(\"id-\" + in.getPayload())\n"
"      .withType(\"greetings\")\n"
"      .withSource(URI.create(\"http://example.com\"))\n"
"      .withSubject(\"greeting-message\") .build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:155
#, fuzzy
msgid "The connector also supports the _structured_ mode.  You can write structured Cloud Events by setting the `cloud-events-mode` attribute to `structured`.  It only supports JSON at the moment.  The written record gets its `content-type` header set to `application/cloudevents+json; charset=UTF-8`, which allows the receiver to understand that it's a structured Cloud Event."
msgstr "El conector también soporta el modo _estructurado_. Puede escribir Eventos en la Nube estructurados estableciendo el atributo `cloud-events-mode` a `structured`. Por el momento solo admite JSON. El registro escrito obtiene su cabecera `content-type` establecida en `application/cloudevents+json; charset=UTF-8`, lo que permite al receptor entender que se trata de un Cloud Event estructurado."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:156
#, fuzzy, no-wrap
msgid "Consuming Cloud Event from Kafka"
msgstr "Consumo de eventos en la nube desde Kafka"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:161
#, fuzzy
msgid "Naturally, the connector can also consume Cloud Events.  The connector detects Cloud Events automatically by checking the record's headers.  It also determines the mode."
msgstr "Naturalmente, el conector también puede consumir Eventos de la Nube. El conector detecta automáticamente los Cloud Events comprobando las cabeceras del registro. También determina el modo."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:164
#, fuzzy
msgid "When the connector receives a Cloud Event, it attaches an `IncomingKafkaCloudEventMetadata` to the message metadata.  So, you can retrieve the various attributes as well as the extensions:"
msgstr "Cuando el conector recibe un Evento de la Nube, adjunta un `IncomingKafkaCloudEventMetadata` a los metadatos del mensaje. Así, puede recuperar los distintos atributos, así como las extensiones:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:170
#, no-wrap
msgid ""
"public Message<Double> process(Message<Integer> priceInUsd) {\n"
"  IncomingCloudEventMetadata<Integer> cloudEventMetadata = priceInUsd.getMetadata(IncomingCloudEventMetadata.class)\n"
"    .orElseThrow(() -> new IllegalArgumentException(\"Expected a Cloud Event\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:176
#, no-wrap
msgid ""
"  LOGGER.infof(\"Received Cloud Events (spec-version: %s): source:  '%s', type: '%s', subject: '%s' \",\n"
"    cloudEventMetadata.getSpecVersion(),\n"
"    cloudEventMetadata.getSource(),\n"
"    cloudEventMetadata.getType(),\n"
"    cloudEventMetadata.getSubject().orElse(\"no subject\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:179
#, no-wrap
msgid ""
"  return priceInUsd.withPayload(Integer.valueOf(priceInUsd.getPayload()) * CONVERSION_RATE);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:181
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:186
#, fuzzy
msgid "With the rise of event-driven architecture, Cloud Events are becoming highly popular.  Since Quarkus 1.9, the Kafka Connector used in Quarkus has built-in support for Cloud Events.  This post introduced Cloud Events and showed how you could write and read Cloud Events easily."
msgstr "Con el auge de la arquitectura basada en eventos, los Cloud Events se están haciendo muy populares. Desde Quarkus 1.9, el conector Kafka utilizado en Quarkus tiene soporte incorporado para Cloud Events. Este post introdujo los Eventos de la Nube y mostró cómo puedes escribir y leer Eventos de la Nube fácilmente."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:188
#, fuzzy
msgid "Many more options are http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[available], and Kafka is not the only part of Quarkus with Cloud Events support.  For example, Funqy[https://quarkus.io/guides/funqy#context-injection] also supports Cloud Event out of the box."
msgstr "Hay muchas más opciones  link:http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[disponibles], y Kafka no es la única parte de Quarkus con soporte para Cloud Events. Por ejemplo, Funqy https://quarkus.io/guides/funqy#context-injection ] también es compatible con Cloud Event de forma inmediata."

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Sending and Receiving Cloud Events with Kafka\n"
#~ "date: 2020-12-01\n"
#~ "tags: reactive kafka\n"
#~ "synopsis: How to send and receive Cloud Events with Quarkus, Kafka and Reactive Messaging\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Envío y recepción de eventos de la nube con Kafka\n"
#~ "date: 2020-12-01\n"
#~ "tags: reactive kafka\n"
#~ "synopsis: Cómo enviar y recibir eventos en la nube con Quarkus, Kafka y Reactive Messaging\n"
#~ "author: cescoffier\n"
#~ "---\n"
