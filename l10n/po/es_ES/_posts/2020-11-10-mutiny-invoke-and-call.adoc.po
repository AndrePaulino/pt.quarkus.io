# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:8
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: Peeking at the streams\n"
"date: 2020-11-10\n"
"tags: reactive mutiny\n"
"synopsis: How to observe events without touching the streams.\n"
"author: cescoffier\n"
"---\n"
msgstr ""
"layout: post\n"
"title: Asomándose a los arroyos\n"
"date: 2020-11-10\n"
"tags: reactive mutiny\n"
"synopsis: Cómo observar los acontecimientos sin tocar las corrientes.\n"
"author: cescoffier\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:15
#, fuzzy
msgid "Mutiny is an event-driven Reactive Programming library.  Like other reactive programming libraries, it uses streams as the primary construct.  These streams convey events, and your code processes these events.  Most of the time, your code is only interested in item and failure events.  But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr "Mutiny es una librería de programación reactiva basada en eventos. Al igual que otras bibliotecas de programación reactiva, utiliza flujos como la construcción principal. Estos flujos transmiten eventos, y su código procesa estos eventos. La mayoría de las veces, tu código sólo está interesado en los eventos de elementos y fallos. Pero hay otros tipos de eventos como la cancelación, la solicitud, la finalización, etc."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:17
#, fuzzy
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "No es raro que necesites mirar estos diversos eventos para entender mejor lo que está pasando o implementar efectos secundarios específicos. Por ejemplo, puedes necesitar cerrar un recurso después de un evento de finalización o registrar un mensaje en caso de fallo o cancelación."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:21
#, fuzzy
msgid "For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.  These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.  It does not transform the received event; it notifies you that something happened and let you react."
msgstr "Para cada tipo de evento, hay un _grupo_ asociado que proporciona los métodos para manejar ese evento específico: `onItem()`, `onFailure()`, `onCompletion()` y así sucesivamente. Estos grupos proporcionan dos métodos para asomarse a los distintos eventos sin afectar a su distribución: `invoke` y `call`. No transforma el evento recibido, sino que le notifica que algo ha ocurrido y le permite reaccionar."

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:22
#, fuzzy, no-wrap
msgid "The invoke method"
msgstr "El método de invocación"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:26
#, fuzzy
msgid "The `invoke` method is synchronous and does not return anything.  Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr "El método `invoke` es sincrónico y no devuelve nada. Mutiny invoca la devolución de llamada configurada cuando el flujo observado envía el evento:"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:33
#, no-wrap
msgid ""
"Uni<Integer> u = uni.onItem()\n"
"    .invoke(i -> System.out.println(\"Received item: \" + i));    \n"
"Multi<Integer> m = multi.onItem()\n"
"    .invoke(i -> System.out.println(\"Received item: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:37
#, fuzzy
msgid "As said above, `invoke` is synchronous.  Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr "Como se ha dicho anteriormente, `invoke` es sincrónico. Mutiny invoca el callback y propaga el evento hacia abajo cuando el callback regresa. Bloquea el envío."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:39
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[alt=invoke]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:41
#, fuzzy
msgid "Of course, we highly recommend you not to block."
msgstr "Por supuesto, le recomendamos encarecidamente que no se bloquee."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:43
#, fuzzy
msgid "The following snippets show how you can log the different types of events."
msgstr "Los siguientes fragmentos muestran cómo se pueden registrar los diferentes tipos de eventos."

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:53
#, no-wrap
msgid ""
"multi\n"
"  .onSubscribe().invoke(() -> System.out.println(\"⬇️ Subscribed\"))\n"
"  .onItem().invoke(i -> System.out.println(\"⬇️ Received item: \" + i))\n"
"  .onFailure().invoke(f -> System.out.println(\"⬇️ Failed with \" + f))\n"
"  .onCompletion().invoke(() -> System.out.println(\"⬇️ Completed\"))\n"
"  .onCancellation().invoke(() -> System.out.println(\"⬆️ Cancelled\"))\n"
"  .onRequest().invoke(l -> System.out.println(\"⬆️ Requested: \" + l))\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:56
#, fuzzy
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "Las flechas del fragmento de código anterior indican si el evento proviene del flujo ascendente (fuente) o descendente (consumidor)."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:59
#, fuzzy
msgid "The `invoke` method does not change the event, except in one case.  If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr "El método `invoke` no cambia el evento, excepto en un caso. Si la devolución de llamada de `invoke` lanza una excepción, el flujo descendente no recibe el evento real, sino que obtiene un evento de fallo en su lugar."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:61
#, fuzzy
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "Al observar el evento de fallo, si la devolución de llamada lanza una excepción, Mutiny propaga un `CompositeException` agregando el fallo original y el fallo de la devolución de llamada."

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:62
#, fuzzy, no-wrap
msgid "The call method"
msgstr "El método de llamada"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:65
#, fuzzy
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "A diferencia de `invoke`, `call` es asíncrono, y la llamada de retorno devuelve un objeto `Uni&amp;lt;?&amp;gt;`."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:67
#, fuzzy
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr "`call` se utiliza a menudo cuando se necesita implementar efectos secundarios asíncronos, como el cierre de recursos."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:69
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/call.png[alt=call]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:71
#, fuzzy
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr "Mutiny no despacha el evento original aguas abajo hasta que la Uni devuelta por el callback emita un elemento:"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:80
#, no-wrap
msgid ""
"multi\n"
"    .onItem().call(i -> \n"
"        Uni.createFrom().nullItem()\n"
"            .onItem().delayIt().by(Duration.ofSeconds(1))\n"
"    )\n"
"----                \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:83
#, no-wrap
msgid ""
"As shown in the previous snippet, you can use this approach to delay items. \n"
"But the primary use case is about completing asynchronous actions:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:85
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:88
#, fuzzy, no-wrap
msgid ""
"multi\n"
"    .onCompletion().call(() -> resource.close())\n"
msgstr "multi .onCompletion().call) → resource.close("

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:93
#, no-wrap
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it. \n"
"It observes the item or failure event from that `Uni`. \n"
"It discards the item value as only the emission matters in this case.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:95
#, no-wrap
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event. \n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:96
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:99
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:102
msgid "Use `invoke` for implementing synchronous side-effects or logging events.  The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:104
msgid "The following table highlights the key differences:"
msgstr ""

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, fuzzy, no-wrap
msgid "Method"
msgstr "Método"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, fuzzy, no-wrap
msgid "`invoke`"
msgstr "`invoke`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, fuzzy, no-wrap
msgid "`call`"
msgstr "`call`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, fuzzy, no-wrap
msgid "Nature"
msgstr "Naturaleza"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, fuzzy, no-wrap
msgid "synchronous"
msgstr "sincrónica"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, fuzzy, no-wrap
msgid "asynchronous"
msgstr "asíncrono"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, fuzzy, no-wrap
msgid "Return type"
msgstr "Tipo de retorno"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, fuzzy, no-wrap
msgid "`void`"
msgstr "`void`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, fuzzy, no-wrap
msgid "`Uni<?>`"
msgstr "`Uni&amp;lt;?&amp;gt;`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, fuzzy, no-wrap
msgid "Main Use cases"
msgstr "Principales casos de uso"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, fuzzy, no-wrap
msgid "logging"
msgstr "registro"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:115
#, fuzzy, no-wrap
msgid "closing resources, flushing data"
msgstr "cierre de recursos, descarga de datos"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:117
#, fuzzy
msgid "These methods are available for every kind of event in the associated group."
msgstr "Estos métodos están disponibles para cada tipo de evento en el grupo asociado."
