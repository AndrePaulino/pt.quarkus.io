# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:8
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: 'Emitter - Bridging the imperative and the reactive worlds'\n"
"date: 2020-10-06\n"
"tags: reactive mutiny messaging kafka\n"
"synopsis: Emitting messages with Reactive Messaging Emitters\n"
"author: cescoffier\n"
"---\n"
msgstr ""
"layout: post\n"
"title: Emisor: un puente entre el mundo imperativo y el reactivo\n"
"date: 2020-10-06\n"
"tags: reactive mutiny messaging kafka\n"
"synopsis: Emisión de mensajes con emisores de mensajes reactivos\n"
"author: cescoffier\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:11
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "En una  link:https://quarkus.io/blog/kafka-avro/[entrada anterior del blog] sobre Kafka y Avro, utilizamos un _emisor_ para enviar mensajes de Kafka."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:13
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=architecture]"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:15
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "En este post, vamos a ver esta construcción de emisor un poco más de cerca."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:17
#, fuzzy
msgid "## Injecting an Emitter"
msgstr "Inyección de un emisor"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:20
#, fuzzy
msgid "Injecting an emitter is straightforward.  You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "Inyectar un emisor es sencillo. Usted indica el canal al que se dirige, es decir, a dónde envía sus mensajes:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:24
#, no-wrap
msgid "@Inject @Channel(\"movies\") Emitter<Movie> emitter;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:28
#, fuzzy
msgid "Remember that reactive messaging uses _channels_ as a primary abstraction.  They can be in-memory channels or mapped to a remote broker."
msgstr "Recuerda que la mensajería reactiva utiliza _canales_ como abstracción principal. Pueden ser canales en memoria o mapeados a un broker remoto."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:33
#, fuzzy
msgid "In the previous code snippet, we inject an `Emitter<Movie>`.  It means you will send messages containing movies as payload.  So, the specified type is the payload type.  That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "En el fragmento de código anterior, inyectamos un `Emitter&amp;lt;Movie&amp;gt;`. Esto significa que enviará mensajes que contienen películas como carga útil. Por lo tanto, el tipo especificado es el tipo de carga útil. Esto le permite enviar: cargas útiles directamente (envueltas automáticamente en un mensaje) o mensajes más detallados que contienen una película como carga útil:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:37
#, no-wrap
msgid "Movie movie = ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:40
#, no-wrap
msgid ""
"// Send payloads directly\n"
"emitter.send(movie);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:43
#, no-wrap
msgid ""
"// Send messages\n"
"emitter.send(Message.of(movie));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:46
#, fuzzy
msgid "## Sending payloads"
msgstr "Envío de cargas útiles"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:50
#, fuzzy
msgid "Sending payload is the simplest way to send data.  You just pass the payload to the `send` method like an instance of `Movie`.  Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "El envío de la carga útil es la forma más sencilla de enviar datos. Sólo tienes que pasar la carga útil al método `send` como una instancia de `Movie`. Bajo el capó, sólo crea un simple `Message` envolviendo la carga útil."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:52
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "Cuando se utiliza con la carga útil, el método `send` devuelve un `CompletionStage` que indica si el procesamiento del mensaje tuvo éxito o falló:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:63
#, no-wrap
msgid ""
"emitter.send(movie)\n"
"    .whenComplete((success, failure) -> {\n"
"        if (failure != null) {\n"
"            System.out.println(\"D'oh! \" + failure.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Message processed successfully\");\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:71
#, fuzzy
msgid "Processing, and will see later event the emission, happens asynchronously.  So, the returned `CompletionStage` lets you know when the message is processed.  The `CompletionStage` is completed successfully when the message is acknowledged.  Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.  If something wrong happens, the `CompletionStage` is completed exceptionally.  The passed exception gives you an idea of the reason."
msgstr "El procesamiento, y veremos más adelante el evento de la emisión, ocurre de forma asíncrona. Por lo tanto, el `CompletionStage` devuelto permite saber cuándo se procesa el mensaje. El `CompletionStage` se completa con éxito cuando el mensaje es reconocido. La mayoría de las veces, significa que el procesamiento se ha completado sin problemas, o que el mensaje ha sido enviado a un corredor con éxito. Si ocurre algo incorrecto, el `CompletionStage` se completa excepcionalmente. La excepción pasada le da una idea de la razón."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:73
#, fuzzy
msgid "## Sending messages"
msgstr "Envío de mensajes"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:79
#, fuzzy
msgid "While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.  The emitter also allows sending messages, and so attach the metadata you want.  In the following example, we configure the outbound Kafka record.  We set the key, the topic, and so on.  That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "Mientras que el envío de cargas útiles es más sencillo, a veces se quieren adjuntar metadatos al mensaje, como configurar cómo debe escribirse en Kafka, información de seguimiento, etc. El emisor también permite el envío de mensajes, y así adjuntar los metadatos que desees. En el siguiente ejemplo, configuramos el registro Kafka de salida. Establecemos la clave, el tema, etc. De esta manera, se pueden enviar mensajes a diferentes tópicos e incluso decidir dinámicamente:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:87
#, no-wrap
msgid ""
"OutgoingKafkaRecordMetadata<?> metadata = OutgoingKafkaRecordMetadata.builder()\n"
"        .withTopic(\"movies\")\n"
"        .withKey(movie.getYear())\n"
"        .build();\n"
"emitter.send(Message.of(movie).addMetadata(metadata));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:90
#, fuzzy
msgid "## Emissions are asynchronous"
msgstr "Las emisiones son asíncronas"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:97
#, fuzzy
msgid "Emitters form a bridge between the imperative and the reactive worlds.  When you emit a message, this message is not processed immediately.  The downstream component consuming the message are part of a _Reactive Streams_.  Passing the message immediately would violate the Reactive Streams protocol.  We must be sure that the downstream components are ready to accept this message.  As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "Los emisores constituyen un puente entre el mundo imperativo y el reactivo. Cuando se emite un mensaje, éste no se procesa inmediatamente. El componente descendente que consume el mensaje forma parte de un _Reactive_ Streams. Pasar el mensaje inmediatamente violaría el protocolo de Reactive Streams. Debemos estar seguros de que los componentes descendentes están preparados para aceptar este mensaje. Como resultado, el emisor no está empujando el mensaje directamente, sino que lo pone en cola en un buffer utilizado para manejar la capacidad de flujo descendente (peticiones en la jerga de Reactive Streams)."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:99
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=buffer]"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:101
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "El componente descendente recibe los mensajes en función de las solicitudes que realiza, garantizando que su capacidad nunca se vea superada."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:103
#, fuzzy
msgid "## Overflow management"
msgstr "Gestión del desbordamiento"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:111
#, fuzzy
msgid "But with buffer comes... overflow.  If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.  Then, you cannot emit anymore, and attempting to emit will throw exceptions.  But what can we do in this case? When injecting the emitter, you can configure an Overflow strategy.  For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.  By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "Pero con el buffer viene... el desbordamiento. Si emite demasiados mensajes y el flujo descendente no puede seguir el ritmo, los mensajes se almacenan en el búfer hasta que éste alcanza su capacidad máxima. Entonces, ya no se puede emitir más, y al intentar hacerlo se lanzan excepciones. Pero, ¿qué podemos hacer en este caso? Cuando se inyecta el emisor, se puede configurar una estrategia de desbordamiento. Por ejemplo, puedes establecer el tamaño del búfer, utilizar un búfer no limitado, soltar los mensajes, fallar, o simplemente ignorar la contrapresión y dejar que el flujo descendente la maneje. Por defecto, utiliza un buffer, pero dependiendo de su caso de uso, puede querer configurarlo de forma diferente:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:118
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.BUFFER, bufferSize = 1000) \n"
"Emitter<Movie> emitter1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:123
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.NONE) \n"
"Emitter<Movie> emitter2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:128
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.UNBOUNDED_BUFFER) \n"
"Emitter<Movie> emitter3;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:131
#, fuzzy
msgid "## Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:134
#, fuzzy
msgid "This post is a brief introduction to the `Emitter` construct from Reactive Messaging.  More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "Este post es una breve introducción a la construcción `Emitter` de Reactive Messaging. Hay más información disponible en la  link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[documentación de SmallRye Reactive Mess]aging."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:138
#, fuzzy
msgid "In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.  First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.  Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr "En la próxima versión de Quarkus (1.9), esta característica será mejorada con dos mejoras muy agradables. Primero, ofrecerá una variante de Mutiny, facilitando la integración con las APIs de Mutiny. Luego, será posible que el caso Kafka emita directamente pares clave/valor sin necesidad de utilizar metadatos."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:139
#, fuzzy
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr "Estén atentos. Lo trataremos en un próximo post."
