# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-07-11 19:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "lthon"
msgstr "lthon"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "2023-07-12"
msgstr "2023-07-12"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus is now compatible with CDI Lite."
msgstr "Quarkus es ahora compatible con CDI Lite."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "arc cdi"
msgstr "arco cdi"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "On the Road to CDI Compatibility"
msgstr "En camino hacia la compatibilidad CDI"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:12
#, fuzzy
msgid "Ever since the very first days of Quarkus, the days that are now covered by the blissful fog of oblivion and the survivors only talk about them after a few pints of beer, dependency injection container was an integral part of the envisioned framework.  And not just any dependency injection container -- a link:/blog/quarkus-dependency-injection/[CDI implementation], of all things."
msgstr "Desde los primeros días de Quarkus, los días que ahora están cubiertos por la dichosa niebla del olvido y los supervivientes sólo hablan de ellos después de unas cuantas pintas de cerveza, el contenedor de inyección de dependencia era una parte integral del marco de trabajo previsto. Y no cualquier contenedor de inyección de dependencia - una  link:/blog/quarkus-dependency-injection/[implementación CDI], de todas las cosas."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:16
#, fuzzy
msgid "At the very beginning, the CDI implementation used was Weld.  Very soon, the Masterminds and Deep Thoughts behind the CDI work in what eventually became Quarkus, Martin Kouba and Stuart Douglas, realized that Weld cannot possibly unlock the full potential that a build-time oriented framework conceals.  Thus, ArC was born."
msgstr "Al principio, la implementación CDI utilizada era Weld. Muy pronto, las mentes maestras y los pensamientos profundos detrás del trabajo CDI en lo que finalmente se convirtió en Quarkus, Martin Kouba y Stuart Douglas, se dieron cuenta de que Weld no podía liberar todo el potencial que oculta un marco orientado al tiempo de compilación. Así nació ArC."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:21
#, fuzzy
msgid "When I first heard of ArC, I thought, surely that means _A reduced CDI_, especially with that capitalization! Alas, I was deeply mistaken.  It is a reference to an activity that I could never possibly indulge in out of the simple concern for my health and safety: _arc welding_.  (That indeed is a backreference to Weld. There are some clever people here!)"
msgstr "La primera vez que oí hablar de ArC, pensé que seguramente significaba _A CDI reducido_, ¡sobre todo con esas mayúsculas! Estaba muy equivocado. Es una referencia a una actividad a la que nunca podría dedicarme por simple preocupación por mi salud y mi seguridad: _la soldadura al arco_. (De hecho, es una referencia a la soldadura. ¡Aquí hay gente muy lista!)"

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:22
#, fuzzy, no-wrap
msgid "Arc Welding"
msgstr "Soldadura por arco"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:28
#, fuzzy
msgid "ArC started with one important architectural constraint that was significantly different to all other existing CDI implementations at that time: it ought to perform the heavy lifting during application build.  Among others, this includes the entire bean discovery process.  If you are familiar with AtInject and its various implementations, this concept doesn't come as a surprise.  For example, Guice is a popular dependency injection container that does all the work at application runtime, while Dagger is a popular alternative that precomputes dependency wiring at build time."
msgstr "ArC comenzó con una importante restricción arquitectónica que era significativamente diferente a todas las demás implementaciones de CDI existentes en ese momento: debía realizar el trabajo pesado durante la compilación de la aplicación. Esto incluye, entre otras cosas, todo el proceso de descubrimiento de beans. Si estás familiarizado con AtInject y sus diversas implementaciones, este concepto no te sorprenderá. Por ejemplo, Guice es un popular contenedor de inyección de dependencias que hace todo el trabajo en tiempo de ejecución de la aplicación, mientras que Dagger es una alternativa popular que precomputa el cableado de dependencias en tiempo de compilación."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:32
#, fuzzy
msgid "With CDI, the situation is not that simple.  CDI 2.0, the latest version at that time, includes features that ultimately preclude running bean discovery at build time; most notably, the _Portable Extensions_ API.  To be able to execute portable extensions, you need to have a running CDI container (to deliver events or use the `BeanManager` API), you need to be able to reflect on application classes (the `Annotated*` types directly expose `java.lang.reflect` types), and you need to support portable extension instances holding various kinds of state (including started threads or open sockets)."
msgstr "Con CDI, la situación no es tan sencilla. CDI 2.0, la última versión en ese momento, incluye características que, en última instancia, impiden ejecutar el descubrimiento de beans en tiempo de compilación; la más notable, la API de extensiones _portables_. Para poder ejecutar extensiones portables, necesitas tener un contenedor CDI en ejecución (para entregar eventos o usar la API `BeanManager` ), necesitas poder reflejar en clases de aplicación (los tipos `Annotated*` exponen directamente los tipos `java.lang.reflect` ), y necesitas soportar instancias de extensiones portables que mantengan varios tipos de estado (incluyendo hilos iniciados o sockets abiertos)."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:35
#, fuzzy
msgid "There are also features that were challenging to implement, like efficient bean metadata storage and runtime access, or dynamic lookup, but those are _just work_.  Portable Extensions were downright impossible."
msgstr "También hay características que eran difíciles de implementar, como el almacenamiento eficiente de metadatos de frijol y el acceso en tiempo de ejecución, o la búsqueda dinámica, pero esos son _sólo trabajo_. Las extensiones portátiles eran francamente imposibles."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:40
#, fuzzy
msgid "ArC made an obvious choice: it will not support Portable Extensions, it will not be a fully compatible implementation of CDI, and it will not be verified by the CDI TCK.  This decision opened the door to pruning some ancient CDI features that have not been widely used or were deemed not important enough for contemporary software world: conversations, specialization, passivation, interceptors bound using the `@Interceptors` annotation, enablement using `beans.xml`, and so on.  Some other features are not a good fit for the build-time approach either: the notion of explicit bean archives, `InterceptionFactory`, or some parts of the `BeanManager` API.  This might sound like a long list, but as a matter of fact, the result was a perfectly \"just enough\" implementation of CDI that allowed running a huge number of existing CDI-based libraries and frameworks, after writing a Quarkus-specific integration."
msgstr "ArC tomó una decisión obvia: no soportará Extensiones Portátiles, no será una implementación totalmente compatible de CDI, y no será verificada por el TCK de CDI. Esta decisión abrió la puerta a la poda de algunas características antiguas de CDI que no se han utilizado ampliamente o que no se consideraron lo suficientemente importantes para el mundo del software contemporáneo: conversaciones, especialización, pasivación, interceptores vinculados mediante la anotación `@Interceptors`, habilitación mediante `beans.xml`, etc. Algunas otras características tampoco encajan bien en el enfoque del tiempo de compilación: la noción de archivos de frijoles explícitos, `InterceptionFactory`, o algunas partes de la API `BeanManager`. Esto puede parecer una larga lista, pero de hecho, el resultado fue una implementación perfectamente \"suficiente\" de CDI que permitió ejecutar un gran número de bibliotecas y frameworks existentes basados en CDI, después de escribir una integración específica para Quarkus."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:42
#, fuzzy
msgid "All was nice and rosy, pink unicorns happily roamed flowery meadows, double rainbows glowed on clear sunny skies, and developers developed mighty microservices all over the link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Over time, some features that were originally omitted, such as decorators, were also implemented."
msgstr "Todo era bonito y color de rosa, los unicornios rosas deambulaban felices por praderas floridas, los arco iris dobles brillaban en cielos claros y soleados, y los desarrolladores desarrollaban poderosos microservicios por todo el  link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Con el tiempo, algunas características que se omitieron originalmente, como los decoradores, también se implementaron."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:45
#, fuzzy
msgid "Of course, some people tried to complain that Quarkus claims it implements CDI, while it really doesn't, because it doesn't pass the TCK, but we don't have to fuss over that.  The absence of these features has been clearly documented, and majestic exclusion lists have been a noble tradition in the CDI world since the beginning of time anyway."
msgstr "Por supuesto, algunas personas intentaron quejarse de que Quarkus afirma que implementa CDI, mientras que en realidad no lo hace, porque no pasa el TCK, pero no tenemos que preocuparnos por eso. La ausencia de estas características ha sido claramente documentada, y las majestuosas listas de exclusión han sido una noble tradición en el mundo CDI desde el principio de los tiempos."

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:46
#, fuzzy, no-wrap
msgid "CDI Lite"
msgstr "CDI Lite"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:49
#, fuzzy
msgid "ArC has quite successfully proven that there indeed is a small seed hidden in CDI, waiting to be watered and manured, waiting to grow and blossom and show to the world that CDI need not be just \"guiced\"; it can also be \"daggered\"."
msgstr "ArC ha demostrado con bastante éxito que existe una pequeña semilla escondida en el CDI, esperando a ser regada y abonada, esperando a crecer y florecer y mostrar al mundo que el CDI no sólo puede ser \"guiado\"; también puede ser \"dagerado\"."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:53
#, fuzzy
msgid "A small group of engineers convened in Red Hat, trying to contrive a diabolical plan: could this be made part of CDI proper? The idea was link:https://github.com/jakartaee/cdi/issues/425[discussed] externally and internally fairly extensively.  Fortunately, CDI was conceived at Red Hat, so we had all the experts, and the link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[first concrete idea] of how this could be done was published relatively soon."
msgstr "Un pequeño grupo de ingenieros se reunió en Red Hat, tratando de urdir un plan diabólico: ¿podría esto formar parte del CDI propiamente dicho? La idea se  link:https://github.com/jakartaee/cdi/issues/425[discutió] externa e internamente de forma bastante extensa. Afortunadamente, CDI se concibió en Red Hat, por lo que contábamos con todos los expertos, y la  link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[primera idea concreta] de cómo podría hacerse se publicó relativamente pronto."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:59
#, fuzzy
msgid "A huge part of those discussions revolved around Portable Extensions.  As mentioned earlier, they cannot be supported at build time, so we knew early on that we had to design a new extension API.  (This is when yours truly enters the scene, not planning to leave until the curtain falls.)  We made several prototypes of various aspects of the API, including a new language model, and eventually link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[published a proposal] (beware, the article is now severely outdated!).  We called it _Build Compatible Extensions_, to highlight the stark contrast with Portable Extensions: this API can be implemented both at build time and at runtime."
msgstr "Una gran parte de esas discusiones giró en torno a las extensiones portátiles. Como ya se ha mencionado, no pueden soportarse en el momento de la compilación, por lo que desde el principio supimos que teníamos que diseñar una nueva API de extensiones. (Aquí es cuando entra en escena su servidor, que no piensa marcharse hasta que caiga el telón). Hicimos varios prototipos de varios aspectos de la API, incluido un nuevo modelo de lenguaje, y finalmente  link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[publicamos una propuesta] (¡cuidado, el artículo está ahora muy desfasado!). La llamamos _Extensiones compatibles con la compilación_, para destacar el marcado contraste con las Extensiones portátiles: esta API puede implementarse tanto en tiempo de compilación como en tiempo de ejecución."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:65
#, fuzzy
msgid "Publishing that proposal had two effects.  First, it has shown that communication is hard, online communication is harder and online communication in a non-native language is pretty darn painful.  Second, it has shown serious interest from us in doing the necessary work.  And it wasn't just us -- some Oracle people have also shown up, most notably Graeme Rocher of the Micronaut fame.  Over the subsequent year, the Core CDI specification was link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refactored] into CDI Lite and CDI Full, the Build Compatible Extensions API was link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporated] (and for that, I actually implemented two prototypes, one in ArC and the other as a Portable Extension for Weld), the CDI TCK was split to support testing only CDI Lite implementations, and so on."
msgstr "La publicación de esa propuesta ha tenido dos efectos. En primer lugar, ha demostrado que la comunicación es difícil, la comunicación en línea es más difícil y la comunicación en línea en una lengua no materna es bastante dolorosa. En segundo lugar, ha mostrado un serio interés por nuestra parte en hacer el trabajo necesario. Y no hemos sido sólo nosotros: también ha aparecido gente de Oracle, sobre todo Graeme Rocher, de Micronaut. Durante el año siguiente, la especificación Core CDI fue  link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refactorizada] en CDI Lite y CDI Full, la API Build Compatible Extensions fue  link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporada] (y para ello, de hecho implementé dos prototipos, uno en ArC y el otro como una Portable Extension para Weld), el CDI TCK fue dividido para soportar pruebas sólo de implementaciones CDI Lite, y así sucesivamente."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:67
#, fuzzy
msgid "Finally, as part of Jakarta EE 10, CDI 4.0 was released, featuring the Lite specification, which became the cornerstone of Jakarta EE Core Profile, which in turn became the cornerstone of MicroProfile."
msgstr "Finalmente, como parte de Jakarta EE 10, se publicó CDI 4.0, con la especificación Lite, que se convirtió en la piedra angular de Jakarta EE Core Profile, que a su vez se convirtió en la piedra angular de MicroProfile."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:69
#, fuzzy
msgid "End of story, go home? Not so fast."
msgstr "Fin de la historia, ¿volver a casa? No tan rápido."

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:70
#, fuzzy, no-wrap
msgid "Compatible Implementation"
msgstr "Aplicación compatible"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:77
#, fuzzy
msgid "Now that we have the CDI Lite specification, do we have any implementations? Of course, all existing implementations of CDI become CDI Full implementations relatively easily; the hardest part is implementing the new extension API, which is possible using a Portable Extension.  But are there any _new_ implementations? Is ArC a CDI Lite implementation now? Is it verified by the TCK at last?"
msgstr "Ahora que tenemos la especificación CDI Lite, ¿tenemos alguna implementación? Por supuesto, todas las implementaciones existentes de CDI se convierten en implementaciones de CDI Completo con relativa facilidad; la parte más difícil es implementar la nueva API de extensión, lo cual es posible utilizando una Extensión Portátil. Pero, ¿existen _nuevas_ implementaciones? ¿Ahora ArC es una implementación CDI Lite? ¿Ha sido verificada por fin por el TCK?"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:81
#, fuzzy
msgid "We naturally intended for ArC to implement CDI Lite, but it wasn't just ArC.  The link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] project also strives to become a CDI Lite implementation, and it is built on top of the Micronaut framework.  I can't speak for that project, but I can say that working on the CDI Lite specification together with the talented people behind ODI was a great experience!"
msgstr "Naturalmente, nuestra intención era que ArC implementara CDI Lite, pero no sólo ArC. El proyecto  link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] también se esfuerza por convertirse en una implementación de CDI Lite, y está construido sobre el marco Micronaut. No puedo hablar por ese proyecto, pero puedo decir que trabajar en la especificación de CDI Lite junto con la talentosa gente detrás de ODI fue una gran experiencia."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:88
#, fuzzy
msgid "Now, when it comes to ArC, more work obviously ensued.  I fortunately already had an Arquillian adapter for ArC from the previous prototyping work (Arquillian is a testing framework the CDI TCK relies upon), and the other relevant TCKs are very easy to embed.  It wasn't too hard to start running them: the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK.  We started running the TCKs with standalone ArC, to make the work easier and faster.  The CDI Lang Model TCK was always passing, as I was developing the implementation together with the specification, and getting the AtInject TCK to pass did not require too much time (it was mostly about implementing a precise resolution of overriden methods).  The CDI Lite TCK is clearly the most complex one; at the beginning, we had roughly 2/3 of the tests passing and the remaining 1/3 failing, for many different reasons."
msgstr "Ahora, en lo que respecta a ArC, obviamente hubo más trabajo. Afortunadamente ya tenía un adaptador Arquillian para ArC del trabajo de prototipado anterior (Arquillian es un marco de pruebas en el que se basa el TCK CDI), y los otros TCKs relevantes son muy fáciles de incrustar. No fue demasiado difícil empezar a ejecutarlos: el AtInject TCK, el CDI Lang Model TCK y el CDI Lite TCK. Empezamos a ejecutar las TCK con ArC independiente, para facilitar y agilizar el trabajo. El CDI Lang Model TCK siempre pasaba, ya que estaba desarrollando la implementación junto con la especificación, y conseguir que el AtInject TCK pasara no requirió demasiado tiempo (se trataba sobre todo de implementar una resolución precisa de los métodos sobreescritos). El TCK de CDI Lite es claramente el más complejo; al principio, teníamos aproximadamente 2/3 de las pruebas que pasaban y el 1/3 restante que fallaban, por muchas razones diferentes."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:96
#, fuzzy
msgid "During the Quarkus 2.16 development cycle, I created an initial exclusion list and we started closing the gap.  For a while, we had to work in an extra repository, until Quarkus moved from the `javax` dependencies to `jakarta`, but that was fairly simple to set up.  The Arquillian adapter needed improvements to correctly implement the CDI type discovery rules (because ArC leaves most of type discovery to the integrator).  Many validations were missing from ArC and we added those.  We even implemented some more features.  When standalone ArC was passing the TCKs, it didn't take much time to run them with full Quarkus too.  Overall, this link:https://github.com/quarkusio/quarkus/issues/28558[took] 26 pull requests and 109 commits, over the course of four to five months."
msgstr "Durante el ciclo de desarrollo de Quarkus 2.16, creé una lista de exclusión inicial y empezamos a cerrar la brecha. Durante un tiempo, tuvimos que trabajar en un repositorio extra, hasta que Quarkus pasó de las dependencias de `javax` a `jakarta`, pero eso fue bastante sencillo de configurar. El adaptador Arquillian necesitaba mejoras para implementar correctamente las reglas de descubrimiento de tipos CDI (porque ArC deja la mayor parte del descubrimiento de tipos al integrador). Faltaban muchas validaciones en ArC y las hemos añadido. Incluso implementamos algunas funciones más. Cuando ArC autónomo pasaba los TCK, no nos llevó mucho tiempo ejecutarlos también con Quarkus completo. En total,  link:https://github.com/quarkusio/quarkus/issues/28558[fueron necesarios] 26 pull requests y 109 commits, a lo largo de cuatro o cinco meses."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:100
#, fuzzy
msgid "We unfortunately also had to create a _strict mode_.  ArC has several usability improvements on top of the CDI specification, and a few of them go against the specification rules.  We recommend users to use the default mode which includes these improvements, but we also want to have an option to turn those improvements off, for people who value specification compatibility more."
msgstr "Por desgracia, también hemos tenido que crear un _modo estricto_. ArC tiene varias mejoras de usabilidad sobre la especificación CDI, y algunas de ellas van en contra de las reglas de la especificación. Recomendamos a los usuarios que utilicen el modo predeterminado que incluye estas mejoras, pero también queremos tener una opción para desactivar esas mejoras, para las personas que valoran más la compatibilidad con la especificación."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:103
#, fuzzy
msgid "And since we are lazy people, like all decent programmers, running the TCKs is automated as part of the Quarkus Maven build (which means they also run on all pull requests to Quarkus that touch ArC).  If you want to try it yourself, it requires very little manual work."
msgstr "Y puesto que somos gente perezosa, como todos los programadores decentes, la ejecución de los TCKs está automatizada como parte de la construcción de Quarkus Maven (lo que significa que también se ejecutan en todos los pull requests a Quarkus que tocan ArC). Si quieres probarlo por ti mismo, requiere muy poco trabajo manual."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:105
#, fuzzy
msgid "Clone the Quarkus repository, if you don’t have it already:"
msgstr "Clona el repositorio de Quarkus, si no lo tienes ya:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:109
#, no-wrap
msgid "git clone https://github.com/quarkusio/quarkus.git\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:111
#, fuzzy
msgid "Build Quarkus:"
msgstr "Construye a Quarkus:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:116
#, no-wrap
msgid ""
"cd quarkus\n"
"mvn -Dquickly\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:118
#, fuzzy
msgid "Run the AtInject TCK:"
msgstr "Ejecute el AtInject TCK:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:123
#, no-wrap
msgid ""
"cd tcks/jakarta-atinject\n"
"mvn clean verify\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:125
#, fuzzy
msgid "Run the CDI Lang Model TCK:"
msgstr "Ejecute el CDI Lang Modelo TCK:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:130
#, no-wrap
msgid ""
"cd ../jakarta-cdi-lang-model\n"
"mvn clean verify\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:132
#, fuzzy
msgid "Run the CDI Lite TCK:"
msgstr "Ejecute el CDI Lite TCK:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:137
#, no-wrap
msgid ""
"cd ../jakarta-cdi\n"
"mvn clean verify\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:140
#, fuzzy
msgid "If everything went fine, you should see the following outputs."
msgstr "Si todo ha ido bien, debería ver las siguientes salidas."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:142
#, fuzzy
msgid "For AtInject:"
msgstr "Para AtInject:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:148
#, no-wrap
msgid ""
"Running io.quarkus.tck.atinject.AtInjectTest\n"
"...\n"
"Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:151
#, fuzzy
msgid "For CDI Lang Model:"
msgstr "Para el modelo CDI Lang:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:157
#, no-wrap
msgid ""
"Running io.quarkus.tck.cdi.lang.model.LangModelTest\n"
"...\n"
"Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:160
#, fuzzy
msgid "For CDI Lite:"
msgstr "Para CDI Lite:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:166
#, no-wrap
msgid ""
"Running TestSuite\n"
"...\n"
"Tests run: 717, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:169
#, fuzzy
msgid "And that's all, folks!"
msgstr "¡Y eso es todo, amigos!"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:171
#, fuzzy
msgid "It is my pleasure to announce that Quarkus 3.2 successfully passes the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK and hence becomes a compatible implementation of CDI Lite."
msgstr "Es un placer anunciar que Quarkus 3.2 pasa con éxito el AtInject TCK, el CDI Lang Model TCK y el CDI Lite TCK y por lo tanto se convierte en una implementación compatible de CDI Lite."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:174
#, fuzzy
msgid "I would also like to extend my sincere gratitude to Martin Kouba and Matěj Novotný, our resident CDI gurus, for welcoming me and sharing with me their deep knowledge of the subject.  I mostly just tried to not wreck their code.  (Which, over time, also became my code, I guess. Whoops!)"
msgstr "También me gustaría expresar mi más sincero agradecimiento a Martin Kouba y Matěj Novotný, nuestros gurús residentes de CDI, por acogerme y compartir conmigo sus profundos conocimientos sobre el tema. Yo me limité a intentar no destrozar su código. (Que, con el tiempo, también se convirtió en mi código, supongo)."
