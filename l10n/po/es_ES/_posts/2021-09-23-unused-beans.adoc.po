# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-04-22 09:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:8
#, fuzzy, no-wrap
msgid ""
"layout: post\n"
"title: 'Unused Beans and Why We Remove Them'\n"
"date: 2021-09-23\n"
"tags: cdi arc \n"
"synopsis: Why does Quarkus detect and remove unused beans by default?\n"
"author: mkouba\n"
"---\n"
msgstr ""
"layout: post\n"
"title: 'Frijoles sin usar y por qué los eliminamos'\n"
"date: 2021-09-23\n"
"tags: cdi arc \n"
"synopsis: ¿Por qué Quarkus detecta y elimina por defecto los granos no utilizados?\n"
"author: mkouba\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:13
#, fuzzy
msgid "Quarkus is a build-time oriented stack, i.e. it tries to do as much as possible at build time to improve the startup time and memory usage of your application.  However, it's not always so easy and straightforward as many existing frameworks and libraries do not take this design choice into account.  And CDI is one of them."
msgstr "Quarkus es una pila orientada al tiempo de compilación, es decir, intenta hacer todo lo posible en el tiempo de compilación para mejorar el tiempo de inicio y el uso de memoria de tu aplicación. Sin embargo, no siempre es tan fácil y sencillo, ya que muchos marcos y bibliotecas existentes no tienen en cuenta esta opción de diseño. Y CDI es uno de ellos."

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:14
#, fuzzy, no-wrap
msgid "Why Bother"
msgstr "Por qué molestarse"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:22
#, fuzzy
msgid "A traditional CDI container attempts to find all beans during the application bootstrap.  For each bean a metadata object is created and kept for the lifetime of the application.  This allows for certain degree of dynamicity at runtime but it's suboptimal when it comes to memory consumption and application startup time.  Quarkus, on the other hand, attempts to detect and remove all _unused_ beans, interceptors and decorators during build by default.  And the reason is simple.  This optimization helps to minimize the amount of generated classes and the number of metadata objects used at runtime, thus conserving memory."
msgstr "Un contenedor CDI tradicional intenta encontrar todos los beans durante el arranque de la aplicación. Para cada frijol se crea un objeto de metadatos que se mantiene durante toda la vida de la aplicación. Esto permite cierto grado de dinamismo en tiempo de ejecución, pero no es óptimo en lo que respecta al consumo de memoria y al tiempo de inicio de la aplicación. Quarkus, por otro lado, intenta detectar y eliminar todos los beans, interceptores y decoradores _no utilizados_ durante la compilación por defecto. Y la razón es simple. Esta optimización ayuda a minimizar la cantidad de clases generadas y el número de objetos de metadatos utilizados en tiempo de ejecución, conservando así la memoria."

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:29
#, fuzzy
msgid "Speaking of generated classes.  The bean discovery, validation and wiring all components together - all this is perfomed at build time.  Quarkus then stores the collected metadata in the bytecode, i.e. for each bean one or more classes are generated.  In order to fullfill some basic CDI API requirements, a bean has at least a corresponding `javax.enterprise.inject.spi.Bean` implementation.  If it's a normal scoped bean then a client proxy class must be also generated.  Finally, intercepted and decorated beans require some more internal constructs."
msgstr "Hablando de clases generadas. El descubrimiento de beans, la validación y el cableado de todos los componentes - todo esto se realiza en tiempo de construcción. A continuación, Quarkus almacena los metadatos recogidos en el código de bytes, es decir, para cada frijol se generan una o más clases. Para cumplir con algunos requisitos básicos de la API CDI, un frijol tiene al menos una implementación correspondiente en `javax.enterprise.inject.spi.Bean`. Si se trata de un bean de ámbito normal, también debe generarse una clase proxy del cliente. Por último, los beans interceptados y decorados requieren algunas construcciones internas más."

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:36
#, fuzzy
msgid "Imagine that your application contains 50 beans that are actually not used anywhere.  If they have a normal scope (e.g. `@ApplicationScoped`) and are intercepted (e.g. declare a method annotated with `@Transactional`) you can expect more than 150 generated classes.  And these classes are completely useless.  Still, the container would have to instantiate and hold a reference on those 50+ bean metadata classes.  Needless to say, that the bean classes and any referenced classes cannot be a subject to dead code elimination when a native image is generated.  Therefore, Quarkus implements an algorithm to get rid of all these classes."
msgstr "Imagina que tu aplicación contiene 50 beans que en realidad no se utilizan en ningún sitio. Si tienen un ámbito normal (por ejemplo, `@ApplicationScoped`) y son interceptados (por ejemplo, declarando un método anotado con `@Transactional`) puedes esperar más de 150 clases generadas. Y estas clases son completamente inútiles. Aún así, el contenedor tendría que instanciar y mantener una referencia en esas más de 50 clases de metadatos de bean. No hace falta decir que las clases bean y cualquier clase referenciada no pueden ser objeto de eliminación de código muerto cuando se genera una imagen nativa. Por lo tanto, Quarkus implementa un algoritmo para deshacerse de todas estas clases."

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:37
#, fuzzy, no-wrap
msgid "What’s Actually Removed?"
msgstr "¿Qué se elimina realmente?"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:41
#, fuzzy
msgid "Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.  Unremovable beans:"
msgstr "Quarkus identifica primero los llamados beans no _removibles_ que forman las raíces en el árbol de dependencia. Frijoles no removibles:"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:43
#, fuzzy
msgid "declare an observer method, or"
msgstr "declarar un método observador, o"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:44
#, fuzzy
msgid "have a name designated via `@Named`, or"
msgstr "tener un nombre designado a través de `@Named`, o"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:45
#, fuzzy
msgid "are annotated with `@io.quarkus.arc.Unremovable`, or"
msgstr "están anotados con `@io.quarkus.arc.Unremovable`, o"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:46
#, fuzzy
msgid "are excluded via the `quarkus.arc.unremovable-types` config property, or"
msgstr "se excluyen a través de la propiedad `quarkus.arc.unremovable-types` config, o"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:47
#, fuzzy
msgid "are otherwise identified by Quarkus extensions."
msgstr "se identifican de otra manera por las extensiones de Quarkus."

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:51
#, fuzzy
msgid "The last point is probably most important, because this is how application entry points are made unremovable.  A good example is a JAX-RS resource class, identified by the RESTEasy extension.  Another example is a bean which declares a `@Scheduled` method, identified by the Scheduler extension."
msgstr "El último punto es probablemente el más importante, porque así es como los puntos de entrada de la aplicación se hacen inamovibles. Un buen ejemplo es una clase de recurso JAX-RS, identificada por la extensión RESTEasy. Otro ejemplo es un bean que declara un método `@Scheduled`, identificado por la extensión Scheduler."

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:53
#, fuzzy
msgid "An _unused_ bean:"
msgstr "Una judía _sin usar_:"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:55
#, fuzzy
msgid "is not unremovable, and"
msgstr "no es inamovible, y"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:56
#, fuzzy
msgid "is not eligible for injection to any injection point in the dependency tree, and"
msgstr "no puede inyectarse en ningún punto de inyección del árbol de dependencias, y"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:57
#, fuzzy
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr "no declara ningún productor que pueda ser inyectado en ningún punto de inyección del árbol de dependencias, y"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:58
#, fuzzy
msgid "is not eligible for injection into any `javax.enterprise.inject.Instance` or `javax.inject.Provider` injection point."
msgstr "no se puede inyectar en ningún punto de inyección de `javax.enterprise.inject.Instance` o `javax.inject.Provider`."

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:60
#, fuzzy
msgid "Finally, unused interceptors and decorators are not associated with any bean."
msgstr "Por último, los interceptores y decoradores no utilizados no están asociados a ningún bean."

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:62
#, fuzzy
msgid "When using the dev mode (e.g. running `./mvnw quarkus:dev`), you can see more information about which beans are being removed in the Dev UI."
msgstr "Cuando se utiliza el modo dev (por ejemplo, ejecutando `./mvnw quarkus:dev`), se puede ver más información sobre los beans que se están eliminando en el Dev UI."

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:63
#, fuzzy, no-wrap
msgid "Main Drawback"
msgstr "Principal inconveniente"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:72
#, fuzzy
msgid "But there's one problem.  Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.  Therefore, it is possible that a certain bean removal results in a false positive error, i.e. a bean is removed although it's actually used.  In such cases, you'll notice a big warning in the log.  Of course, users and extension authors have several options how to eliminate these errors.  For users, the easiest way is to add a special annotation: `@io.quarkus.arc.Unremovable` or use the `quarkus.arc.unremovable-types` config property.  Finally, it's also possible to disable this optimization via the `quarkus.arc.remove-unused-beans=false` config property."
msgstr "Pero hay un problema. Quarkus no puede detectar la búsqueda programática realizada a través del método estático `CDI.current()`. Por lo tanto, es posible que la eliminación de un determinado bean dé lugar a un error falso positivo, es decir, que se elimine un bean aunque realmente se utilice. En tales casos, se notará una gran advertencia en el registro. Por supuesto, los usuarios y los autores de extensiones tienen varias opciones para eliminar estos errores. Para los usuarios, la forma más fácil es añadir una anotación especial: `@io.quarkus.arc.Unremovable` o utilizar la propiedad `quarkus.arc.unremovable-types` config. Por último, también es posible desactivar esta optimización a través de la propiedad de configuración `quarkus.arc.remove-unused-beans=false`."

#. type: Title ==
#: upstream/_posts/2021-09-23-unused-beans.adoc:73
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusión"

#. type: Plain text
#: upstream/_posts/2021-09-23-unused-beans.adoc:76
#, fuzzy
msgid "Quarkus detects and removes unused beans to help you on your way to a subatomic application.  And if something goes wrong, there are options that make it possible to configure the behavior of this optimization."
msgstr "Quarkus detecta y elimina los granos no utilizados para ayudarte en tu camino hacia una aplicación subatómica. Y si algo va mal, hay opciones que permiten configurar el comportamiento de esta optimización."
