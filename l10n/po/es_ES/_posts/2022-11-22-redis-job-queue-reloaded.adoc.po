# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-11-22 13:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:1
#, fuzzy, no-wrap
msgid "2022-11-22"
msgstr "2022-11-22"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:1
#, no-wrap
msgid "post"
msgstr "post"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:1
#, fuzzy, no-wrap
msgid "How to implement a more reliable job queue with Redis, including fault tolerance, de-duplication, and poison pill."
msgstr "Cómo implementar una cola de trabajo más fiable con Redis, incluyendo la tolerancia a fallos, la desduplicación y la píldora venenosa."

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:1
#, fuzzy, no-wrap
msgid "redis"
msgstr "redis"

#. type: YAML Front Matter: title
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:1
#, fuzzy, no-wrap
msgid "Redis Job Queue - Reloaded"
msgstr "Cola de trabajos de Redis - Recargada"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:12
#, fuzzy
msgid "In https://quarkus.io/blog/redis-job-queue/[How to implement a job queue with Redis], we explained how to implement a job queue mechanism with Redis and the new Redis API from Quarkus.  The approach explored in that blog post had a significant flaw: if the execution of a job failed, the request was lost and will never be re-attempted."
msgstr "En  link:https://quarkus.io/blog/redis-job-queue/[Cómo implementar una cola de trabajos con Redis], explicamos cómo implementar un mecanismo de cola de trabajos con Redis y la nueva API de Redis de Quarkus. El enfoque explorado en esa entrada del blog tenía un fallo importante: si la ejecución de un trabajo fallaba, la petición se perdía y nunca se volvería a intentar."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:14
#, fuzzy
msgid "In this post, we explain how to improve the reliability of the job queue to handle failures, enable retry and use a _dead-letter queue_ to avoid poison pills."
msgstr "En este post, explicamos cómo mejorar la fiabilidad de la cola de trabajos para manejar los fallos, habilitar el reintento y utilizar una _cola de letras muertas_ para evitar las píldoras de veneno."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:16
#, fuzzy
msgid "## Recap & Problem"
msgstr "Recapitulación y problema"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:18
#, fuzzy
msgid "In the https://quarkus.io/blog/redis-job-queue/[previous blog post], we implemented the following system."
msgstr "En la  link:https://quarkus.io/blog/redis-job-queue/[anterior entrada del blog], implementamos el siguiente sistema."

#. type: Target for macro image
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:19
#, no-wrap
msgid "/assets/images/posts/redis-job-queue/application.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:24
#, fuzzy
msgid "An application receives _fight requests_ and writes these requests into a Redis list.  Several simulators processed this list.  The outcomes of the _fights_ were communicated using Redis Pub/Sub."
msgstr "Una aplicación recibe _peticiones de lucha_ y escribe estas peticiones en una lista de Redis. Varios simuladores procesaron esta lista. Los resultados de las _peleas_ se comunicaron utilizando Redis Pub/Sub."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:27
#, fuzzy
msgid "The architecture works and ensures that a fight can only be executed once, thanks to the `brpop` command used by the simulator code.  This command pops the item from the queue in an atomic manner and ensure that the other simulators can't process it too."
msgstr "La arquitectura funciona y asegura que una pelea sólo puede ser ejecutada una vez, gracias al comando `brpop` utilizado por el código del simulador. Este comando saca el elemento de la cola de forma atómica y asegura que los otros simuladores no puedan procesarlo también."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:31
#, fuzzy
msgid "However, this architecture has a drawback.  If the processing of the popped fight request fails, the request is lost.  No other simulator would be able to process it, and if the simulator that failed restarts, it will not reprocess the same request."
msgstr "Sin embargo, esta arquitectura tiene un inconveniente. Si falla el procesamiento de la solicitud de lucha saltada, la solicitud se pierde. Ningún otro simulador podrá procesarla, y si el simulador que ha fallado se reinicia, no volverá a procesar la misma petición."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:33
#, fuzzy
msgid "## Introducing more queues"
msgstr "Introducción de más colas"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:37
#, fuzzy
msgid "An approach to handle that problem is to introduce more queues.  In addition to the main queue (the Redis list from the image above), we introduce one queue per simulator.  Thus, each simulator has its private queue."
msgstr "Un enfoque para manejar ese problema es introducir más colas. Además de la cola principal (la lista Redis de la imagen anterior), introducimos una cola por simulador. Así, cada simulador tiene su cola privada."

#. type: Target for macro image
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:38
#, no-wrap
msgid "/assets/images/posts/redis-job-queue/reloaded.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:41
#, fuzzy
msgid "These private queues form a safety net."
msgstr "Estas colas privadas forman una red de seguridad."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:43
#, fuzzy
msgid "So, the simulator does use not only the _main queue_ but also its private queue:"
msgstr "Por lo tanto, el simulador no sólo utiliza la _cola principal_, sino también su cola privada:"

#. type: delimited block -
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:48
#, no-wrap
msgid ""
"this.queues = ds.list(FightRequest.class);\n"
"this.queueName = \"queue-\" + name; // the name of the private queue\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:54
#, fuzzy
msgid "When a simulator pops a request from the main queue, it does not process it immediately; it writes it to its private queue.  To achieve this, we cannot use `brpop` and then write to the other queue, as if something wrong happens in between, we would have the same problem.  Instead, we use `blmove,` which pops an element from a list and pushes it into another in an atomic fashion.  Thus, we ensure that multiple simulators cannot consume the same request and that the request cannot be lost."
msgstr "Cuando un simulador saca una petición de la cola principal, no la procesa inmediatamente, sino que la escribe en su cola privada. Para lograr esto, no podemos usar `brpop` y luego escribir en la otra cola, ya que si algo malo sucede en el medio, tendríamos el mismo problema. En su lugar, utilizamos `blmove,`, que extrae un elemento de una lista y lo introduce en otra de forma atómica. Así, nos aseguramos de que varios simuladores no puedan consumir la misma petición y que ésta no se pierda."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:56
#, fuzzy
msgid "So, we use the following code to move the request from the main queue to the private queue:"
msgstr "Por lo tanto, utilizamos el siguiente código para mover la solicitud de la cola principal a la cola privada:"

#. type: delimited block -
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:65
#, no-wrap
msgid ""
"// pop the item at the right side of the 'fight-requests' queue\n"
"// and writes it to the left side of 'queueName'.\n"
"// it returns the moved item or `null` in the entry queue, 'fight-requests',\n"
"// does not have any item, even after the 1-second delay\n"
"var moved = queues.blmove(\"fight-requests\", queueName,  \n"
"        Position.RIGHT, Position.LEFT, Duration.ofSeconds(1));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:68
#, fuzzy
msgid "Now, the simulator does not simulate the requests from the main queue but needs to process the ones added to its private queue."
msgstr "Ahora, el simulador no simula las peticiones de la cola principal, sino que necesita procesar las que se añaden a su cola privada."

#. type: delimited block -
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:79
#, no-wrap
msgid ""
"public void processRequestFromPrivateQueue() {  \n"
"    var request = queues.lindex(queueName, -1);  \n"
"    while (request != null) {  \n"
"        runSimulation(request);  \n"
"        queues.lrem(queueName, 1, request);    \n"
"        request = queues.lindex(\"queue-\" + name, -1);  \n"
"    }  \n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:85
#, fuzzy
msgid "This code is slightly different from the code from the previous blog.  This time, we do not pop.  We get the last item from the queue (index `-1` is the last one), process it, and then remove it from the queue.  We do this until the queue is empty."
msgstr "Este código es ligeramente diferente del código del blog anterior. Esta vez, no hacemos pop. Obtenemos el último elemento de la cola (el índice `-1` es el último), lo procesamos y lo eliminamos de la cola. Hacemos esto hasta que la cola esté vacía."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:87
#, fuzzy
msgid "Let's put everything together:"
msgstr "Pongamos todo junto:"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:88
#, fuzzy
msgid "when the simulator starts, it should process the items from its private queue. So, if it crashes, it will retry to process the item."
msgstr "Cuando el simulador se inicia, debe procesar los elementos de su cola privada. Así, si se bloquea, volverá a intentar procesar el elemento."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:89
#, fuzzy
msgid "once the private queue is empty, it gets new requests from the main queue. It will not process them directly but re-trigger the processing of the private queue until the queue is empty."
msgstr "una vez que la cola privada está vacía, recibe nuevas peticiones de la cola principal. No las procesará directamente, sino que volverá a activar el procesamiento de la cola privada hasta que ésta se vacíe."

#. type: delimited block -
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:108
#, no-wrap
msgid ""
"@Override  \n"
"public void run() {  \n"
"  // First, check if we are recovering, and drain the requests from the \n"
"  // simulator's queue  \n"
"  processRequestFromPrivateQueue();  \n"
"  while (! stopped) {  \n"
"    // Simulator's queue drained - poll the main queue  \n"
"    var moved = queues.blmove(\"fight-requests\", queueName,  \n"
"        Position.RIGHT, Position.LEFT, Duration.ofSeconds(1)\n"
"    );  \n"
"    if (moved != null) {  \n"
"      // If an element has been moved, process it  \n"
"      processRequestFromPrivateQueue();  \n"
"    }  \n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:111
#, fuzzy
msgid "## New architecture, new problems"
msgstr "Nueva arquitectura, nuevos problemas"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:115
#, fuzzy
msgid "That approach fixes the initial problem.  If the processing fails, we retry it (as the request is not removed from the private queue).  That will handle transient failures pretty well."
msgstr "Este enfoque soluciona el problema inicial. Si el procesamiento falla, lo reintentamos (ya que la solicitud no se elimina de la cola privada). Eso manejará bastante bien los fallos transitorios."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:117
#, fuzzy
msgid "However, it also has its own set of drawbacks:"
msgstr "Sin embargo, también tiene sus propios inconvenientes:"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:119
#, fuzzy
msgid "_Duplicates_: if the processing succeeds, but the `lrem` fails for any reason (like a network failure), the request will be processed another time as it was not removed from the queue."
msgstr "_Duplicados_: si el procesamiento tiene éxito, pero el `lrem` falla por cualquier razón (como un fallo de la red), la solicitud se procesará otra vez, ya que no se eliminó de la cola."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:120
#, fuzzy
msgid "_Poison pill_: if a request cannot be processed successfully, it will retry to process it forever."
msgstr "_Píldora venenosa_: si una solicitud no puede ser procesada con éxito, volverá a intentar procesarla para siempre."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:122
#, fuzzy
msgid "### De-duplication"
msgstr "Desduplicación"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:125
#, fuzzy
msgid "Handling _duplicates_ require having a way to identify the requests uniquely and deduplicate manually.  In other words, if all our requests have a unique id, we can check if that id has already been processed (for example, by storing the processed ids in another list or a hash). If the item has already been processed, ignore it (remove it from the queue) and process it to the next one:"
msgstr "El manejo de _duplicados_ requiere tener una forma de identificar las solicitudes de manera única y desduplicarlas manualmente. En otras palabras, si todas nuestras peticiones tienen un id único, podemos comprobar si ese id ya ha sido procesado (por ejemplo, almacenando los ids procesados en otra lista o en un hash). Si el elemento ya ha sido procesado, lo ignoramos (lo eliminamos de la cola) y procesamos al siguiente:"

#. type: delimited block -
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:138
#, no-wrap
msgid ""
"public void processRequestFromPrivateQueue() {  \n"
"    var request = queues.lindex(queueName, -1);  \n"
"    while (request != null) {  \n"
"        if (! isDuplicate(request)) {\n"
"            runSimulation(request);  \n"
"        }\n"
"        queues.lrem(queueName, 1, request);    \n"
" .      request = queues.lindex(\"queue-\" + name, -1);  \n"
"    }  \n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:141
#, fuzzy
msgid "### Avoiding swallowing the poison pill"
msgstr "Evitar tragar la píldora venenosa"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:146
#, fuzzy
msgid "Handling _poison pills_ is more complex.  A _poison pill_ is a request that will always make the processing fails.  It can be because of a bug in the processing code or something unexpected; it will always fail.  Retrying, in this case, will not help; we are not facing a transient issue."
msgstr "El manejo de las píldoras _venenosas_ es más complejo. Una píldora _venenosa_ es una petición que siempre hará que el procesamiento falle. Puede ser por un error en el código de procesamiento o por algo inesperado; siempre fallará. Reintentar, en este caso, no ayudará; no estamos ante un problema transitorio."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:150
#, fuzzy
msgid "So, what can we do? We need to track the number of processing attempts for that request, and if it exceeds a specific number, let's face it: we won't be able to handle the request.  We generally want to send the request to a dead-letter queue (DLQ), i.e., a specific queue storing the unprocessable items:"
msgstr "Entonces, ¿qué podemos hacer? Tenemos que hacer un seguimiento del número de intentos de procesamiento de esa solicitud, y si supera un número determinado, seamos sinceros: no podremos atender la solicitud. Por lo general, queremos enviar la solicitud a una cola de espera (DLQ), es decir, una cola específica que almacena los elementos no procesables:"

#. type: delimited block -
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:167
#, no-wrap
msgid ""
"public void processRequestFromPrivateQueue() {  \n"
"    var request = queues.lindex(queueName, -1);  \n"
"    while (request != null) {  \n"
"        if (counter.incr(counterName) > MAX_ATTEMPT) {  \n"
"            // Give up - it's a poison pill\n"
"            queues.lpush(DLQ, request); // Add to DLQ\n"
"        } else {  \n"
"            runSimulation(request);  \n"
"        }  \n"
"        request = queues.lindex(\"queue-\" + name, -1);  \n"
"        queues.lrem(queueName, 1, request);  \n"
"        counter.set(counterName, 0); // Reset  \n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:170
#, fuzzy
msgid "The counter is a specific Redis integer value that we increment and reset once we succeed or give up."
msgstr "El contador es un valor entero específico de Redis que incrementamos y ponemos a cero una vez que tenemos éxito o nos rendimos."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:174
#, fuzzy
msgid "The items from the DLQ are not lost; they are saved for future processing.  These items could be re-added to the main queue (to verify if it was not a transient issue or the bug was fixed).  Another approach requires that a human administrator looks at these requests before re-injecting them into the system; maybe it was just a formatting issue..."
msgstr "Los elementos de la DLQ no se pierden, sino que se guardan para un futuro procesamiento. Estos elementos podrían volver a añadirse a la cola principal (para verificar si no se trata de un problema transitorio o si el fallo se ha solucionado). Otro enfoque requiere que un administrador humano mire estas solicitudes antes de volver a inyectarlas en el sistema; tal vez era sólo un problema de formato..."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:176
#, fuzzy
msgid "## Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:181
#, fuzzy
msgid "This post explores how to improve the job queue we implemented in https://quarkus.io/blog/redis-job-queue/[How to implement a job queue with Redis].  This initial implementation, while simple, would lose requests if the processing fails.  This post proposes another, more complex, architecture to handle that case but also handle duplicates and poison pills.  But, nothing comes for free, and the resulting code is slightly more complex."
msgstr "Este post explora cómo mejorar la cola de trabajos que implementamos en  link:https://quarkus.io/blog/redis-job-queue/[Cómo implementar una cola de trabajos con Redis]. Esta implementación inicial, aunque simple, perdería peticiones si el procesamiento falla. Este post propone otra arquitectura, más compleja, para manejar ese caso pero también manejar duplicados y píldoras de veneno. Pero, nada es gratis, y el código resultante es ligeramente más complejo."

#. type: Plain text
#: upstream/_posts/2022-11-22-redis-job-queue-reloaded.adoc:184
#, fuzzy
msgid "Remember: Redis is a fantastic toolbox.  But, it's a toolbox; you build what you need with it, as it is rarely available out of the box.  That being said, the richness of the Redis commands lets you do many things... (spoiler: we will see some of these things in future posts)."
msgstr "Recuerda: Redis es una caja de herramientas fantástica. Pero, es una caja de herramientas; tú construyes lo que necesitas con ella, ya que rara vez está disponible fuera de la caja. Dicho esto, la riqueza de los comandos de Redis te permite hacer muchas cosas... (spoiler: veremos algunas de estas cosas en futuros posts)."
