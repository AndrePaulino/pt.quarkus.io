# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-13"
msgstr "2020-10-13"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "Correo electrónico:"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "How does `retry` actually work?"
msgstr "¿Cómo funciona realmente `retry`?"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny retry"
msgstr "reintento de motín reactivo"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - How does retry... retries?"
msgstr "Motín - ¿Cómo se reintenta... reintentar?"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:17
#, fuzzy
msgid "Last week, David, a Quarkus user, asked me about retrying an asynchronous operation.  David has a _picky_ remote HTTP service, which sometimes misbehaves.  Easy answer! Just do: `uni.onFailure().retry().atMost(x)`.  But, David is curious, and asked me a second question: how does retry work? Well, that’s simple; it just retries...  As you can imagine, that did not satisfy David’s curiosity."
msgstr "La semana pasada, David, un usuario de Quarkus, me preguntó sobre el reintento de una operación asíncrona. David tiene un servicio HTTP remoto _quisquilloso_, que a veces se comporta mal. La respuesta es fácil. Basta con hacer: `uni.onFailure().retry().atMost(x)`. Pero, David es curioso, y me hizo una segunda pregunta: ¿cómo funciona el reintento? Bueno, es sencillo; simplemente reintenta... Como puedes imaginar, eso no satisfizo la curiosidad de David."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:20
#, fuzzy
msgid "While I was answering to David, I realized that retrying is not that simple and deserves more explanation.  That’s what we are going to see in this blog post."
msgstr "Mientras respondía a David, me di cuenta de que reintentar no es tan sencillo y merece más explicación. Eso es lo que vamos a ver en esta entrada del blog."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:22
#, fuzzy
msgid "## Disclaimer about retries"
msgstr "Descargo de responsabilidad sobre los reintentos"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:29
#, fuzzy
msgid "Okay, if you are the kind of reader who skips the terms and conditions, you can jump to the next section.  But, for others, I need to warn you about retries.  Retries may not be the solution to your problem, as it can be terrible.  Retrying can only be done if your system can handle duplicated requests or messages.  In other words, you can only retry if your system is idempotent, i.e., sending a request or a message multiple times does not change the overall state.  In doubt, check before implementing a retry, as it can harm your system."
msgstr "De acuerdo, si eres el tipo de lector que se salta los términos y condiciones, puedes pasar a la siguiente sección. Pero, para los demás, tengo que advertirte sobre los reintentos. Los reintentos pueden no ser la solución a tu problema, ya que pueden ser terribles. Los reintentos sólo se pueden hacer si tu sistema puede manejar las peticiones o mensajes duplicados. En otras palabras, sólo puedes reintentar si tu sistema es idempotente, es decir, que enviar una petición o un mensaje varias veces no cambia el estado general. En caso de duda, compruebe antes de implementar un reintento, ya que puede perjudicar a su sistema."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:31
#, fuzzy
msgid "Disclaimer said! Let’s look under the hood of retry."
msgstr "¡Descargo de responsabilidad! Vamos a mirar bajo el capó de la reintentación."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:33
#, fuzzy
msgid "## Retry is about resubscribing"
msgstr "Reintentar es volver a suscribirse"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:35
#, fuzzy
msgid "Let’s imagine you have a `Uni` representing your asynchronous action, like in David’s case, an invocation of a remote service:"
msgstr "Imaginemos que tienes un `Uni` que representa tu acción asíncrona, como en el caso de David, una invocación a un servicio remoto:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:39
#, no-wrap
msgid "Uni<String> uni = invokePickyService(client);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:45
#, fuzzy
msgid "Unis are lazy.  Until someone subscribes to them, nothing happens.  In our case, the request is only sent to the remote service when someone subscribes to the `uni`.  So to execute the request, we need to subscribe:"
msgstr "Las Unis son perezosas. Hasta que alguien se suscribe a ellas, no ocurre nada. En nuestro caso, la petición sólo se envía al servicio remoto cuando alguien se suscribe a la `uni`. Así que para ejecutar la petición, necesitamos suscribirnos:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:53
#, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client);\n"
"uni.subscribe().with(\n"
"    resp -> System.out.println(\"Success: \" + resp),\n"
"    failure -> System.out.println(\"Failed: \" + failure.getMessage())\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:57
#, fuzzy
msgid "In Quarkus, most of the time, you return the `Uni`, and Quarkus subscribes to it.  So, don't be mistaken, there is a subscription, you may not see it."
msgstr "En Quarkus, la mayoría de las veces, usted devuelve el `Uni`, y Quarkus se suscribe a él. Por lo tanto, no te equivoques, hay una suscripción, puede que no lo veas."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:60
#, fuzzy
msgid "This laziness is the retry secret.  In the following sequence diagram, you can see that the request is sent when we get a subscriber:"
msgstr "Esta pereza es el secreto del reintento. En el siguiente diagrama de secuencia, se puede ver que la solicitud se envía cuando obtenemos un abonado:"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:62
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/subscription.png[alt=subscription]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:65
#, fuzzy
msgid "An interesting consequence of this is that if you subscribe twice, you emit two requests, and so get two responses:"
msgstr "Una consecuencia interesante de esto es que si te suscribes dos veces, emites dos peticiones y, por tanto, recibes dos respuestas:"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:67
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/double-subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/double-subscription.png[alt=double subscription]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:72
#, fuzzy
msgid "But let’s go back to retry.  What’s a retry? A retry is a reaction to a failure, so you are going to write: `uni.onFailure().retry()`.  You also need to indicate how long do you want to retry:"
msgstr "Pero volvamos al reintento. ¿Qué es un reintento? Un reintento es una reacción a un fallo, así que vas a escribir: `uni.onFailure().retry()`. También tienes que indicar cuánto tiempo quieres reintentar:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:80
#, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().indefinitely();\n"
"uni.subscribe().with(\n"
"        resp -> System.out.println(\"Success: \" + resp)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:83
#, fuzzy
msgid "In this snippet, we retry _indefinitely_ until we get a successful result."
msgstr "En este fragmento, reintentamos _indefinidamente_ hasta obtener un resultado exitoso."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:87
#, fuzzy
msgid "But, how does it work under the hood? It’s quite simple.  If it gets a failure, it just re-subscribes:"
msgstr "Pero, ¿cómo funciona bajo el capó? Es muy sencillo. Si recibe un fallo, simplemente se vuelve a suscribir:"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:89
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/retry.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/retry.png[alt=retry]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:92
#, fuzzy
msgid "It resubscribes until it gets a successful response.  In other words, retrying is resubscribing."
msgstr "Se vuelve a suscribir hasta que obtiene una respuesta satisfactoria. En otras palabras, reintentar es volver a suscribirse."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:94
#, fuzzy
msgid "## How many times should I retry?"
msgstr "¿Cuántas veces debo reintentar?"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:99
#, fuzzy
msgid "That’s always a good question.  Should I retry _indefinitely_? Most probably, not.  Indefinitely can be very long, and it could never end if the called service fails continuously."
msgstr "Esa es siempre una buena pregunta. ¿Debería volver a intentarlo _indefinidamente_? Lo más probable es que no. Indefinidamente puede ser muy largo, y podría no terminar nunca si el servicio llamado falla continuamente."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:101
#, fuzzy
msgid "You can configure the number of retries using `atMost`:"
msgstr "Puede configurar el número de reintentos utilizando `atMost`:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:111
#, no-wrap
msgid ""
" Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().atMost(2);\n"
"uni.subscribe().with(\n"
"        resp -> System.out.println(\"Success: \" + resp),\n"
"        failure -> System.out.println(\"Failure: \" + failure.getMessage())\n"
");\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:114
#, no-wrap
msgid ""
"`atMost` indicates that at most `n` attempts will be done before failing.\n"
"If we still get a failure after that number of resubscription, the last failure is sent to the subscriber.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:116
#, no-wrap
msgid "image:/assets/images/posts/mutiny-retry/retry-failed.png[]\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:118
#, no-wrap
msgid "You can also use `until` and decide to retry by looking at the received failure:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:120
#: upstream/_posts/2020-10-13-uni-retry.adoc:139
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:123
#, fuzzy, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().until(failure -> ! (failure instanceof TooManyRequestsException));\n"
msgstr "¡Uni&lt;String&gt; uni = invokePickyService(client) .onFailure().retry().until(failure → ! (failure instanceof TooManyRequestsException));"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:126
#, no-wrap
msgid "## Bonus: Exponential backoff\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:131
#, no-wrap
msgid ""
"So far, our retries happen immediately.\n"
"It might not be very wise, and separating a bit our retries may give better results, especially when facing intermittent failures due to the load or other external causes.\n"
"Using exponential backoff provides a reasonable tradeoff.\n"
"Retrying with exponential backoff:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:137
#, no-wrap
msgid ""
"* retries after an initial delay,\n"
"* on every failure, it doubles the previous delay, with an optional maximum,\n"
"* it can use a jitter to add a random duration to the delay,\n"
"* it can have a max delay if needed,\n"
"* it is still constrained by `atMost` \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:143
#, fuzzy, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1)).withJitter(0.2).atMost(10);\n"
msgstr "Uni&lt;String&gt; uni = invokePickyService(client) .onFailure().retry() .withBackOff(Duration.ofSeconds(1)).withJitter(0.2).atMost(10);"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:144
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:149
#, fuzzy
msgid "This last snippet configures the retry with exponential backoff.  The first retry happens after 1 second, and then it doubles every time without an upper limit.  Random jitter is applied to delays.  If, unfortunately, after ten attempts, it still fails, the failure is sent to the subscriber."
msgstr "Este último fragmento configura el reintento con backoff exponencial. El primer reintento ocurre después de 1 segundo, y luego se duplica cada vez sin un límite superior. Se aplica un jitter aleatorio a los retrasos. Si, por desgracia, después de diez intentos, sigue fallando, el fallo se envía al abonado."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:151
#, fuzzy
msgid "## Demo time!"
msgstr "¡Hora de la demostración!"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:155
#, fuzzy
msgid "Ok, enough talking.  I’ve built a simple playground where you can adjust and try the various retry policies: https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5.  You can _jbang_ the script by downloading it and running `jbang Retry.java`, or just run:"
msgstr "Bien, basta de hablar. He construido un simple campo de juego donde puedes ajustar y probar las diferentes políticas de reintento:  https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5  Puedes _jbangear_ el script descargándolo y ejecutando `jbang Retry.java`, o simplemente ejecutarlo:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:159
#, no-wrap
msgid "jbang https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:162
#, fuzzy
msgid "The called service fails 50% of the time (well, it uses a random, so statistically 50% of the time)."
msgstr "El servicio llamado falla el 50% de las veces (bueno, utiliza un aleatorio, así que estadísticamente el 50% de las veces)."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:169
#, fuzzy
msgid "That concludes this blog post.  Again, before using retry, please verify that your system can support it.  Retrying is resubscribing.  You can configure how long, how many times, and when retrying should be attempted.  There are many more options offered by Mutiny, like `when` or using deadlines (`expireIn` and `expireAt`) when using exponential backoff.  You can try all these with the provided playground."
msgstr "Con esto concluye esta entrada del blog. Una vez más, antes de utilizar el reintento, verifique que su sistema puede soportarlo. Reintentar es volver a suscribirse. Puede configurar durante cuánto tiempo, cuántas veces y cuándo debe intentarse el reintento. Hay muchas más opciones que ofrece Mutiny, como `when` o el uso de plazos ( `expireIn` y `expireAt`) cuando se utiliza el backoff exponencial. Puedes probar todas ellas con el campo de juego proporcionado."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:170
#, fuzzy
msgid "Stay tuned! We have plenty of other gems to discuss here!"
msgstr "Esté atento. Tenemos muchas otras joyas de las que hablar aquí."

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Mutiny - How does retry... retries?\n"
#~ "date: 2020-10-13\n"
#~ "tags: reactive mutiny retry\n"
#~ "synopsis: How does `retry` actually work?\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Motín - ¿Cómo se reintenta... reintentar?\n"
#~ "date: 2020-10-13\n"
#~ "tags: reactive mutiny retry\n"
#~ "synopsis: ¿Cómo funciona realmente el \"reintento\"?\n"
#~ "author: cescoffier\n"
#~ "---\n"
