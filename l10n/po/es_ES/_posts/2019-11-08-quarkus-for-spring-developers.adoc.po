# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:1
#, no-wrap
msgid "jclingan"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:1
#, no-wrap
msgid "2019-11-12"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:1
#, no-wrap
msgid "extension spring microprofile"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:1
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:16
#, fuzzy, no-wrap
msgid "Quarkus for Spring Developers"
msgstr "Quarkus para desarrolladores de Spring"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:12
#, fuzzy
msgid "The arrival of Quarkus 1.0 brings an innovative platform for developing Linux container- and kubernetes-native Java microservices. Developers typically have to set aside their existing knowledge as they begin to evaluate new and innovative runtime frameworks. Quarkus is different because it was created by a collection of engineers with a deep expertise in a broad collection of Java technologies. This includes Spring API compatibility, brought to Quarkus by the same engineers that bring Spring Boot support to https://www.redhat.com/en/products/runtimes[Red Hat Runtimes]."
msgstr "La llegada de Quarkus 1.0 aporta una plataforma innovadora para el desarrollo de microservicios Java nativos de contenedores Linux y kubernetes. Los desarrolladores normalmente tienen que dejar de lado sus conocimientos existentes cuando empiezan a evaluar nuevos e innovadores marcos de ejecución. Quarkus es diferente porque fue creado por un conjunto de ingenieros con una profunda experiencia en una amplia colección de tecnologías Java. Esto incluye la compatibilidad con la API de Spring, aportada a Quarkus por los mismos ingenieros que aportan la compatibilidad con Spring Boot a  link:https://www.redhat.com/en/products/runtimes[Red Hat Runtimes]."

#. type: Target for macro image
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:16
#, no-wrap
msgid "2021_RHD_Quarkus_Spring_EBook_Final.png"
msgstr ""

#. type: delimited block =
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:19
#, fuzzy
msgid "A free 140-page book, https://red.ht/quarkus-spring-devs[Quarkus for Spring Developers], is now available that discusses this topic in greater, and updated, detail."
msgstr "Ya está disponible un libro gratuito de 140 páginas,  link:https://red.ht/quarkus-spring-devs[Quarkus for Spring Developers], que trata este tema con mayor detalle y de forma actualizada."

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:22
#, fuzzy, no-wrap
msgid "I'm a Spring developer. Why Quarkus?"
msgstr "Soy un desarrollador de Spring. ¿Por qué Quarkus?"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:24
#, fuzzy
msgid "It is becoming increasingly apparent that containerization in general and Kubernetes in particular is forcing a re-evaluation of Java for the development of cloud native applications. Kubernetes is a highly dynamic shared infrastructure that becomes more cost effective as the number of applications a cluster can host grows and the responsiveness to application lifecycle changes improves, like redeployments and scaling up/down. Traditional Java cloud native runtimes have layered new functionality on an existing stack, without really re-thinking the underlying stack itself. This results in larger memory consumption and slower startup times, to the point where organizations are now willing to forgo their deep Java expertise to retrain and retool for Go and Node.js to drive more value out of their large investment in Kubernetes clusters."
msgstr "Cada vez es más evidente que la contenerización en general y Kubernetes en particular está obligando a reevaluar Java para el desarrollo de aplicaciones nativas de la nube. Kubernetes es una infraestructura compartida muy dinámica que resulta más rentable a medida que aumenta el número de aplicaciones que puede albergar un clúster y mejora la capacidad de respuesta a los cambios en el ciclo de vida de las aplicaciones, como la redistribución y el aumento/disminución de la escala. Los tiempos de ejecución nativos de la nube de Java tradicionales han superpuesto nuevas funcionalidades a una pila existente, sin replantearse realmente la propia pila subyacente. Esto se traduce en un mayor consumo de memoria y en tiempos de arranque más lentos, hasta el punto de que las organizaciones están dispuestas a renunciar a sus profundos conocimientos de Java para reciclarse y reequiparse con Go y Node.js con el fin de obtener más valor de su gran inversión en clústeres Kubernetes."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:25
#, fuzzy, no-wrap
msgid "Traditional Java Stack"
msgstr "Pila Java tradicional"

#. type: Target for macro image
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:25
#, no-wrap
msgid "TraditionalStack.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:28
#, fuzzy
msgid "This is the very problem that Quarkus addresses.  Quarkus is optimized for memory density and rapid startup time. Quarkus applications running on the JVM can deliver nearly twice as many application instances in the same amount of RAM when compared to other cloud native Java stacks, and up to 7x more instances when packaged as a native binary. This is more than simply compiling to a native binary using https://github.com/oracle/graal/tree/master/substratevm[SubstrateVM] (a feature of https://www.graalvm.org/[GraalVM]). Quarkus has optimized traditionally “highly dynamic” frameworks for Kubernetes immutable infrastructure, resulting in reduced memory utilization and faster initialization. These optimized and https://quarkus.io/guides/[well-documented] frameworks, called “extensions”, consist of best of breed and standard APIs. The result is https://quarkus.io/assets/images/quarkus_metrics_graphic_bootmem_wide.png[significant improvements in runtime efficiency]."
msgstr "Este es precisamente el problema que aborda Quarkus. Quarkus está optimizado para la densidad de memoria y el tiempo de inicio rápido. Las aplicaciones de Quarkus que se ejecutan en la JVM pueden ofrecer casi el doble de instancias de aplicación en la misma cantidad de RAM en comparación con otras pilas de Java nativas de la nube, y hasta 7 veces más instancias cuando se empaquetan como un binario nativo. Esto es más que simplemente compilar a un binario nativo utilizando  link:https://github.com/oracle/graal/tree/master/substratevm[SubstrateVM] (una característica de  link:https://www.graalvm.org/[GraalVM]). Quarkus ha optimizado los marcos tradicionalmente \"altamente dinámicos\" para la infraestructura inmutable de Kubernetes, lo que resulta en una utilización de memoria reducida y una inicialización más rápida. Estos marcos optimizados y  link:https://quarkus.io/guides/[bien documentados], llamados \"extensiones\", consisten en lo mejor de la clase y las API estándar. El resultado es una  link:https://quarkus.io/assets/images/quarkus_metrics_graphic_bootmem_wide.png[mejora significativa de la eficiencia en tiempo de ejecución]."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:29
#, fuzzy, no-wrap
msgid "Quarkus Stack"
msgstr "Pila de Quarkus"

#. type: Target for macro image
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:29
#, no-wrap
msgid "QuarkusStack.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:31
#, fuzzy, no-wrap
msgid "What existing knowledge can Spring developers bring to Quarkus?"
msgstr "¿Qué conocimientos existentes pueden aportar los desarrolladores de Spring a Quarkus?"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:33
#, fuzzy
msgid "Quarkus’ Spring API compatibility includes https://quarkus.io/guides/spring-di-guide[Spring DI], https://quarkus.io/guides/spring-web-guide[Spring Web], and https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA]. Additional Spring APIs are being planned like Spring Security and Spring Config. When running on the JVM, Quarkus applications can utilize virtually any Java library. Many libraries, as long as they do not use Java reflection, will compile to native\". Lombok, a popular library among Spring developers for example, works with native compilation. To be clear, the Spring API compatibility in Quarkus is not intended to be a complete Spring platform to re-host existing Spring applications. The intent is to offer enough Spring API compatibility to make developing new applications with Quarkus a natural getting started experience. When combined with pre-optimized extensions, Quarkus delivers an https://quarkus.io/guides/[amazing amount of functionality] for microservices development. With all this being said, developers have successfully migrated Spring applications to Quarkus :-)"
msgstr "La compatibilidad de Quarkus con las API de Spring incluye  link:https://quarkus.io/guides/spring-di-guide[Spring DI],  link:https://quarkus.io/guides/spring-web-guide[Spring Web] y  link:https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA]. Se están planeando otras APIs de Spring como Spring Security y Spring Config. Cuando se ejecuta en la JVM, las aplicaciones de Quarkus pueden utilizar prácticamente cualquier biblioteca Java. Muchas bibliotecas, siempre que no usen Java reflection, compilarán a nativo\". Lombok, una biblioteca popular entre los desarrolladores de Spring, por ejemplo, funciona con compilación nativa. Para que quede claro, la compatibilidad de la API de Spring en Quarkus no pretende ser una plataforma completa de Spring para volver a alojar las aplicaciones de Spring existentes. La intención es ofrecer suficiente compatibilidad con la API de Spring para que el desarrollo de nuevas aplicaciones con Quarkus sea una experiencia natural de inicio. Cuando se combina con extensiones preoptimizadas, Quarkus ofrece una  link:https://quarkus.io/guides/[cantidad increíble de funcionalidad] para el desarrollo de microservicios. Con todo esto dicho, los desarrolladores han migrado con éxito las aplicaciones de Spring a Quarkus :-)"

#. type: delimited block =
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:37
#, fuzzy
msgid "The Spring Framework is highly dynamic in nature. To address this, the Quarkus Spring compatibility extensions map Spring APIs to APIs in existing extensions that have already been optimized for fast startup, reduced memory utilization and native compilation, like RestEasy and CDI. Also, the Quarkus Spring compatibility extensions do not utilize the Spring application context. For these reasons, attempting to utilize additional Spring libraries will likely not work."
msgstr "El marco de trabajo de Spring es muy dinámico por naturaleza. Para solucionar esto, las extensiones de compatibilidad de Quarkus Spring asignan las APIs de Spring a las APIs de las extensiones existentes que ya han sido optimizadas para un inicio rápido, una utilización de memoria reducida y una compilación nativa, como RestEasy y CDI. Además, las extensiones de compatibilidad de Quarkus Spring no utilizan el contexto de aplicación de Spring. Por estas razones, es probable que no funcione el intento de utilizar bibliotecas adicionales de Spring."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:40
#, fuzzy, no-wrap
msgid "*Quarkus Spring Web Example*\n"
msgstr "*Ejemplo de web Quarkus Spring*"

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:45
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.Optional;\n"
"import org.springframework.web.bind.annotation.*;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:55
#, no-wrap
msgid ""
"@RestController\n"
"@RequestMapping(\"/person\")\n"
"public class PersonController {\n"
"    @GetMapping(path = \"/greet/{id}\", produces = \"text/plain\")\n"
"    public String greetPerson(@PathVariable(name = \"id\") long id) {\n"
"        String name=\"\";\n"
"        // ...\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:60
#, no-wrap
msgid ""
"    @GetMapping(produces = \"application/json\")\n"
"    public Iterable<Person> findAll() {\n"
"        return personRepository.findAll();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:63
#, fuzzy, no-wrap
msgid "*Quarkus Spring Repository Example*\n"
msgstr "*Ejemplo de repositorio Quarkus Spring*"

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:66
#, no-wrap
msgid "package org.acme.springmp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:69
#, no-wrap
msgid ""
"import java.util.List;\n"
"import org.springframework.data.repository.CrudRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:73
#, no-wrap
msgid ""
"public interface PersonRepository extends CrudRepository<Person, Long> {\n"
"    List<Person> findByAge(int age);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:76
#, fuzzy, no-wrap
msgid "*Quarkus Spring Service + MicroProfile Fault Tolerance Example*\n"
msgstr "*Ejemplo de tolerancia a fallos de Quarkus Spring Service + MicroProfile*"

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:84
#, no-wrap
msgid ""
"import org.eclipse.microprofile.faulttolerance.Fallback;\n"
"import org.eclipse.microprofile.faulttolerance.Timeout;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.springframework.beans.factory.annotation.Autowired;\n"
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:87
#, no-wrap
msgid ""
"@Service                                            // Spring\n"
"public class PersonService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:91
#, no-wrap
msgid ""
"    @Autowired                                      // Spring\n"
"    @RestClient                                     // MicroProfile\n"
"    SalutationMicroProfileRestClient salutationRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:94
#, no-wrap
msgid ""
"    @Value(\"${fallbackSalutation}\")                 // Spring\n"
"    String fallbackSalutation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:100
#, no-wrap
msgid ""
"    @CircuitBreaker(delay=5000, failureRatio=.5)    // MicroProfile\n"
"    @Fallback(fallbackMethod = \"salutationFallback\")// MicroProfile\n"
"    public String getSalutation() {\n"
"        return salutationRestClient.getSalutation();\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:102
#, fuzzy, no-wrap
msgid "Are there additional benefits for Spring developers?"
msgstr "¿Existen ventajas adicionales para los desarrolladores de Spring?"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:104
#, fuzzy
msgid "In addition to the improved memory utilization and startup time, Quarkus offers the following benefits to Spring developers:"
msgstr "Además de la mejora en la utilización de la memoria y el tiempo de arranque, Quarkus ofrece las siguientes ventajas a los desarrolladores de Spring:"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:106
#, fuzzy, no-wrap
msgid "*Function-as-a-Service (FaaS) Runtime.* When compiled to a native binary, Quarkus applications can start in under .0015 seconds, making it possible to use the existing Spring and Java API knowledge with FaaS functions. (https://quarkus.io/guides/azure-functions-http[Azure], https://quarkus.io/guides/amazon-lambda[AWS Lambda])\n"
msgstr "*Tiempo de ejecución de la función como servicio (FaaS).* Cuando se compila a un binario nativo, las aplicaciones de Quarkus pueden iniciarse en menos de 0,0015 segundos, lo que permite utilizar los conocimientos existentes de las API de Spring y Java con las funciones FaaS. link:https://quarkus.io/guides/azure-functions-http[(Azure],  link:https://quarkus.io/guides/amazon-lambda[AWS Lambda])"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:107
#, fuzzy, no-wrap
msgid "*Live Coding.* Start with a “Hello World” sample app and transform it into a complex microservice without ever restarting the app. Just save and reload browser to see changes along the way. Quarkus live coding “just works” out of the box, regardless of IDE.\n"
msgstr "*Codificación en vivo.* Comienza con una aplicación de ejemplo \"Hola Mundo\" y transfórmala en un microservicio complejo sin necesidad de reiniciar la aplicación. Simplemente guarda y recarga el navegador para ver los cambios en el camino. Quarkus live coding \"simplemente funciona\" fuera de la caja, independientemente del IDE."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:108
#, fuzzy, no-wrap
msgid "*Support for reactive and imperative models.* Quarkus has a reactive core that supports the traditional imperative model, reactive model, or both in the same application.\n"
msgstr "*Soporte para modelos reactivos e imperativos.* Quarkus tiene un núcleo reactivo que soporta el modelo imperativo tradicional, el modelo reactivo, o ambos en la misma aplicación."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:109
#, fuzzy, no-wrap
msgid "*Early detection of dependency injection errors.* Quarkus catches dependency injection errors during compilation instead of at runtime.\n"
msgstr "*Detección temprana de errores de inyección de dependencias.* Quarkus detecta los errores de inyección de dependencias durante la compilación en lugar de en tiempo de ejecución."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:110
#, fuzzy, no-wrap
msgid "*Use best of breed frameworks and standards together.* Quarkus supports Spring API compatibility, Eclipse Vert.x, MicroProfile (JAX-RS, CDI, etc), reactive streams and messaging, and more in the same application. Read https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/[“@Autowire MicroProfile into Spring Boot”] for using Spring and MicroProfile APIs together in the same project.\n"
msgstr "*Utilice juntos los mejores marcos y estándares.* Quarkus admite la compatibilidad con la API de Spring, Eclipse Vert.x, MicroProfile (JAX-RS, CDI, etc.), flujos reactivos y mensajería, y más en la misma aplicación. Lea  link:https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus/[\"@Autowire MicroProfile en Spring Boot\"] para utilizar las API de Spring y MicroProfile juntas en el mismo proyecto."

#. type: Title ==
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:112
#, fuzzy, no-wrap
msgid "How should Spring developers get started with Quarkus?"
msgstr "¿Cómo deben empezar los desarrolladores de Spring con Quarkus?"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:114
#, fuzzy
msgid "Recommended steps include:"
msgstr "Los pasos recomendados incluyen:"

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:116
#, fuzzy
msgid "Follow the https://quarkus.io/get-started/[Getting Started Guide] as a general Quarkus introduction."
msgstr "Siga la  link:https://quarkus.io/get-started/[Guía de Inicio] como una introducción general a Quarkus."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:117
#, fuzzy
msgid "Follow the https://quarkus.io/guides/spring-di-guide[Spring DI], https://quarkus.io/guides/spring-web-guide[Spring Web], and https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA] guides."
msgstr "Siga las guías de  link:https://quarkus.io/guides/spring-di-guide[Spring DI],  link:https://quarkus.io/guides/spring-web-guide[Spring Web] y  link:https://quarkus.io/guides/spring-data-jpa-guide[Spring Data JPA]."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:118
#, fuzzy
msgid "Create a new app using https://code.quarkus.io/[code.quarkus.io]."
msgstr "Crea una nueva aplicación usando  link:https://code.quarkus.io/[code.quarkus.io]."

#. type: Plain text
#: upstream/_posts/2019-11-08-quarkus-for-spring-developers.adoc:118
#, fuzzy
msgid "Optionally watch https://www.youtube.com/watch?v=9wJm8g83vqA&list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&index=10&t=0s[Kubernetes Native Spring Apps on Quarkus] Devoxx presentation"
msgstr "Opcionalmente ver la presentación de  link:https://www.youtube.com/watch?v=9wJm8g83vqA&amp;list=PLsM3ZE5tGAVYUKfQRUC6Gp61oV1WJEIPJ&amp;index=10&amp;t=0s[Kubernetes Native Spring Apps on Quarkus] Devoxx"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Quarkus for Spring Developers\n"
#~ "date: 2019-11-12\n"
#~ "tags: extension spring microprofile\n"
#~ "author: jclingan\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Quarkus para desarrolladores de Spring\n"
#~ "date: 2019-11-12\n"
#~ "tags: extension spring microprofile\n"
#~ "author: jclingan\n"
#~ "---\n"
