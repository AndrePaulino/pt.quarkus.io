# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-02 07:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:1
#, fuzzy, no-wrap
msgid "bennetelli"
msgstr "bennetelli"

#. type: YAML Front Matter: date
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:1
#, fuzzy, no-wrap
msgid "2022-01-13"
msgstr "2022-01-13"

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "Correo electrónico:"

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:1
#, fuzzy, no-wrap
msgid "extension cloudwatch"
msgstr "extensión cloudwatch"

#. type: Title ==
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:1
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:9
#, fuzzy, no-wrap
msgid "Creating a Quarkus extension for AWS CloudWatch"
msgstr "Creación de una extensión de Quarkus para AWS CloudWatch"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:12
#, fuzzy
msgid "We recently had the situation that we wanted to log our Quarkus application logs to AWS CloudWatch. Basically it takes some time but is not a big deal. Adding a CloudWatch dependency, creating a Log Handler and push the logs to CloudWatch via the provided AWS CloudWatch API. But what if you want to share it with others? Of course you could put it on GitHub as part of your project so others can copy and paste it, but that’s not the most elegant way to share code with others."
msgstr "Recientemente nos hemos encontrado con la situación de querer registrar los logs de nuestra aplicación Quarkus en AWS CloudWatch. Básicamente lleva algo de tiempo pero no es un gran problema. Añadir una dependencia de CloudWatch, crear un Log Handler y empujar los registros a CloudWatch a través de la API proporcionada de AWS CloudWatch. ¿Pero qué pasa si quieres compartirlo con otros? Por supuesto, podrías ponerlo en GitHub como parte de tu proyecto para que otros puedan copiarlo y pegarlo, pero esa no es la forma más elegante de compartir el código con otros."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:16
#, fuzzy
msgid "That’s why we implemented a Quarkus extension so others can use it more easily and don’t need to reinvent the wheel or need to copy paste things around.  How do I do that? Here the Quarkiverse Hub comes in. Quarkiverse is a GitHub organization where developers can host and share their extension with others. There are several benefits you get for free when hosting the extension in Quarkiverse instead of using the good old way of doing all the things on your own. By using Quarkiverse you don’t need to build the artifact, release it with the Sonatype Nexus Manager (or something similar) and distribute it on Maven Central and other repositories.  Quarkiverse comes with all these things so you can focus on implementing the extension itself. The following post describes what needs to be done to initialize, implement and share a CloudWatch Quarkus extension."
msgstr "Por eso hemos implementado una extensión de Quarkus para que otros puedan usarla más fácilmente y no tengan que reinventar la rueda o tener que copiar y pegar cosas. ¿Cómo se hace eso? Aquí entra el Quarkiverse Hub. Quarkiverse es una organización de GitHub donde los desarrolladores pueden alojar y compartir su extensión con otros. Hay varios beneficios que obtienes de forma gratuita al alojar la extensión en Quarkiverse en lugar de usar la buena manera antigua de hacer todas las cosas por tu cuenta. Al usar Quarkiverse no necesitas construir el artefacto, liberarlo con el Sonatype Nexus Manager (o algo similar) y distribuirlo en Maven Central y otros repositorios. Quarkiverse viene con todas estas cosas para que puedas centrarte en implementar la extensión en sí. El siguiente post describe lo que hay que hacer para inicializar, implementar y compartir una extensión de CloudWatch Quarkus."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:19
#, fuzzy
msgid "If you want to use Quarkiverse to publish your extension on the Hub (which is what we recommend) and make use of all the advantages you get by using it, you simply need to open a new extension proposal issue in the quarkusio/quarkus GitHub organization. By doing this, most of the requirements are fulfilled already as there will be a template generated for you and you just have to implement your extension code. In case you are using an existing project as template, there are some requirements you need to take care of.  In order to automate extension releases and publication of docs, there are some rules that need to be followed for projects under the Quarkiverse organization:"
msgstr "Si quieres utilizar Quarkiverse para publicar tu extensión en el Hub (que es lo que recomendamos) y hacer uso de todas las ventajas que se obtienen al utilizarlo, simplemente tienes que abrir un nuevo issue de propuesta de extensión en la organización quarkusio/quarkus GitHub. Al hacer esto, la mayoría de los requisitos ya se cumplen, ya que habrá una plantilla generada para ti y sólo tienes que implementar el código de tu extensión. En caso de que utilices un proyecto existente como plantilla, hay algunos requisitos que debes tener en cuenta. Para automatizar los lanzamientos de extensiones y la publicación de documentos, hay algunas reglas que deben seguirse para los proyectos bajo la organización de Quarkiverse:"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:24
#, fuzzy, no-wrap
msgid ""
"    • The extension repository should be named quarkus-<project>\n"
"    • A Quarkiverse extension *MUST* belong to the io.quarkiverse.<project> groupId\n"
"    • The root pom.xml *MUST* inherit from io.quarkiverse:quarkiverse-parent\n"
"    • A Quarkiverse extension contains the following folders and files:\n"
msgstr ""
"<li> <p>El repositorio de extensiones debe llamarse quarkus-&lt;proyecto&gt;</p> </li> \n"
"<li> <p>Una extensión de Quarkiverse *DEBE* pertenecer al groupId de io.quarkiverse.&lt;project&gt;</p> </li> \n"
"<li> <p>El pom.xml raíz *DEBE* heredar de io.quarkiverse:quarkiverse-parent</p> </li> \n"
"<li> <p>Una extensión de Quarkiverse contiene las siguientes carpetas y archivos:</p> </li>"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:25
#, fuzzy, no-wrap
msgid "deployment\n"
msgstr "despliegue"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:26
#, fuzzy, no-wrap
msgid "runtime\n"
msgstr "tiempo de ejecución"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:27
#, fuzzy, no-wrap
msgid "integration-test\n"
msgstr "prueba de integración"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:28
#, fuzzy, no-wrap
msgid "docs\n"
msgstr "docs"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:29
#, fuzzy, no-wrap
msgid "pom.xml\n"
msgstr "pom.xml"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:30
#, fuzzy, no-wrap
msgid "LICENSE\n"
msgstr "LICENCIA"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:31
#, fuzzy, no-wrap
msgid "README\n"
msgstr "README"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:34
#, fuzzy
msgid "This article covers the runtime and deployment content only as the other things are optional, generated by the project template already or even important, but not the most important and pragmatic thing when you want to learn how a Quarkus extension can be created.  Let’s start with the deployment section. It contains classes needed for the initialization of the Quarkus extension. Without this initialization class, your extension won’t be identified when starting your Quarkus application."
msgstr "Este artículo cubre el tiempo de ejecución y el contenido de despliegue sólo como las otras cosas son opcionales, generados por la plantilla del proyecto ya o incluso importante, pero no lo más importante y pragmático cuando se quiere aprender cómo una extensión de Quarkus puede ser creado. Vamos a empezar con la sección de despliegue. Contiene las clases necesarias para la inicialización de la extensión de Quarkus. Sin esta clase de inicialización, tu extensión no será identificada al iniciar tu aplicación Quarkus."

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:38
#, no-wrap
msgid "class LoggingCloudwatchProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:43
#, no-wrap
msgid ""
"    @BuildStep\n"
"    FeatureBuildItem feature() {\n"
"        return new FeatureBuildItem(\"logging-cloudwatch\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:51
#, no-wrap
msgid ""
"    @BuildStep\n"
"    @Record(ExecutionTime.RUNTIME_INIT)\n"
"    LogHandlerBuildItem addCloudwatchLogHandler(final LoggingCloudWatchConfig config,\n"
"            final LoggingCloudWatchHandlerValueFactory cloudWatchHandlerValueFactory) {\n"
"        return new LogHandlerBuildItem(cloudWatchHandlerValueFactory.create(config));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:54
#, fuzzy
msgid "In the snippet above you can see a _feature()_ method which is annotated with _@BuildStep_ and returns a new FeatureBuildItem. It exposes the name of the feature (logging-cloudwatch) displayed in the log during application bootstrap.  The second method _addCloudWatchHandler()_ initializes the extensions runtime configurations provided by the LoggingCloudWatchConfig and LoggingCloudWatchHandlerValueFactory class. Luckily there is a LogHandlerBuildItem provided, so we can overwrite the existing log handler by adding our own implementation. There are lots of other BuildItems provided so it’s definitely worth it, taking a look at it if you want to create your own extension. The parameter of this method is a config class which will be described in the following snippet."
msgstr "En el fragmento anterior puedes ver un método _feature(_ ) que está anotado con _@BuildStep_ y devuelve un nuevo FeatureBuildItem. Expone el nombre de la característica (logging-cloudwatch) que se muestra en el registro durante el arranque de la aplicación. El segundo método _addCloudWatchHandler()_ inicializa las configuraciones en tiempo de ejecución de las extensiones proporcionadas por la clase LoggingCloudWatchConfig y LoggingCloudWatchHandlerValueFactory. Por suerte hay un LogHandlerBuildItem proporcionado, por lo que podemos sobrescribir el manejador de registro existente añadiendo nuestra propia implementación. Hay muchos otros BuildItems proporcionados así que definitivamente vale la pena, echarle un vistazo si quieres crear tu propia extensión. El parámetro de este método es una clase config que será descrita en el siguiente fragmento."

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:59
#, no-wrap
msgid ""
"@ConfigRoot(phase = ConfigPhase.RUN_TIME, name = \"log.cloudwatch\")\n"
"public class LoggingCloudWatchConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:62
#, no-wrap
msgid ""
"    @ConfigItem(defaultValue = \"true\")\n"
"    boolean enabled;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:65
#, no-wrap
msgid ""
"    @ConfigItem\n"
"    public String region;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:68
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:72
#, fuzzy
msgid "The _LoggingCloudWatchConfig_ is building the bridge between the extension itself and the Quarkus application which uses the extension. It’s combining the _application.properties entries_ in the Quarkus application with our extension. That means with this class you can define the properties available in the _application.properties_ file and make the extension configurable from the outside.  The _@ConfigRoot_ defines the prefix of the property in the _application.properties_ and the _@ConfigItems_ is the postfix. One application.properties entry we are accepting with this class is log.cloudwatch.enabled for example."
msgstr "El _LoggingCloudWatchConfig_ está construyendo el puente entre la propia extensión y la aplicación Quarkus que utiliza la extensión. Es la combinación de las _entradas application_.properties en la aplicación Quarkus con nuestra extensión. Esto significa que con esta clase puedes definir las propiedades disponibles en el archivo application. _properties_ y hacer que la extensión sea configurable desde el exterior. El _@ConfigRoot_ define el prefijo de la propiedad en el application. _properties_ y el _@ConfigItems_ es el postfijo. Una entrada del application.properties que aceptamos con esta clase es log.cloudwatch.enabled por ejemplo."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:74
#, fuzzy
msgid "Besides the _LoggingCloudWatchConfig_ there is another parameter of the _addCloudwatchLogHandler()_ method. It’s the corresponding factory class."
msgstr "Además del _LoggingCloudWatchConfig_ hay otro parámetro del método _addCloudwatchLogHandler()_. Es la clase de fábrica correspondiente."

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:79
#, no-wrap
msgid ""
"@Recorder\n"
"public class LoggingCloudWatchHandlerValueFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:84
#, no-wrap
msgid ""
"    public RuntimeValue<Optional<Handler>> create(final LoggingCloudWatchConfig config) {\n"
"        if (!config.enabled) {\n"
"            return new RuntimeValue<>(Optional.empty());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:87
#, no-wrap
msgid ""
"        AWSLogsClientBuilder clientBuilder = AWSLogsClientBuilder.standard();\n"
"        clientBuilder.setCredentials(new CloudWatchCredentialsProvider(config));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:89
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:93
#, no-wrap
msgid "        // …\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:91
#, no-wrap
msgid "        AWSLogs awsLogs = clientBuilder.build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:97
#, no-wrap
msgid ""
"        LoggingCloudWatchHandler handler = new LoggingCloudWatchHandler(awsLogs, config.logGroup.get(),\n"
"                config.logStreamName.get(), token);\n"
"        // …\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:101
#, no-wrap
msgid ""
"        return new RuntimeValue<>(Optional.of(handler));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:104
#, fuzzy
msgid "The LoggingCloudWatchHandlerValueFactory is the glue between the actually business logic of the extension: dealing with application logs and putting these logs to AWS and the configurations of the _application.properties_ file mentioned before. As you can see in the _create()_ method, configuration entries are checked and used for initializing the CloudWatch connection."
msgstr "El LoggingCloudWatchHandlerValueFactory es el pegamento entre la lógica de negocio real de la extensión: tratar con los registros de la aplicación y poner estos registros en AWS y las configuraciones del archivo _application.properties_ mencionado anteriormente. Como puedes ver en el método _create()_, las entradas de configuración se comprueban y se utilizan para inicializar la conexión de CloudWatch."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:107
#, fuzzy
msgid "Now that we have made the extension configurable for the extension users by adding _application.properties_ entries, exposing the extension name and providing the configurations to the handler class which creates the AWS CloudWatch objects needed to put log messages in AWS CloudWatch, we only need to add one missing piece.  The Log Handler itself. In the snippet above, in the _LoggingCloudWatchHandlerValueFactory_ we created it already and returned it as a RuntimeValue which we are using in the _LoggingCloudwatchProcessor_ class. That’s the call chain needed to overwrite the existing default log handler."
msgstr "Ahora que hemos hecho que la extensión sea configurable para los usuarios de la extensión añadiendo entradas en _application.properties_, exponiendo el nombre de la extensión y proporcionando las configuraciones a la clase handler que crea los objetos de AWS CloudWatch necesarios para poner los mensajes de registro en AWS CloudWatch, sólo necesitamos añadir una pieza que falta. El propio Log Handler. En el fragmento anterior, en el _LoggingCloudWatchHandlerValueFactory_ ya lo hemos creado y lo hemos devuelto como un RuntimeValue que estamos utilizando en la clase _LoggingCloudwatchProcessor_. Esa es la cadena de llamadas necesaria para sobrescribir el manejador de registro existente por defecto."

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:111
#, no-wrap
msgid "class LoggingCloudWatchHandler extends Handler {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:116
#, no-wrap
msgid ""
"    private AWSLogs awsLogs;\n"
"    private String logStreamName;\n"
"    private String logGroupName;\n"
"    private String sequenceToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:118
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:125
#, no-wrap
msgid ""
"    LoggingCloudWatchHandler(AWSLogs awsLogs, String logGroup, String logStreamName, String token) {\n"
"        this.logGroupName = logGroup;\n"
"        this.awsLogs = awsLogs;\n"
"        this.logStreamName = logStreamName;\n"
"        this.sequenceToken = token;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:128
#, no-wrap
msgid ""
"    @Override\n"
"    public void publish(LogRecord record) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:130
#, no-wrap
msgid "        // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:137
#, no-wrap
msgid ""
"        InputLogEvent logEvent = new InputLogEvent()\n"
"                .withMessage(body)\n"
"                .withTimestamp(System.currentTimeMillis());\n"
"        awsLogs.putLogEvents(request);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:141
#, fuzzy
msgid "This log handler is a java.util.LogHandler which takes the LogRecord object as a parameter of the publish method which will be called when writing a log in an application. For example like log.info(“I Love Open Source!”);. If configured correctly, this log handler will be called when writing logs. As we want to put the log messages in AWS CloudWatch, we need to add the logic for doing it.  Therefore we create an InputLogEvent and call _putLogEvents()_ which puts the log message to CloudWatch. That’s basically it."
msgstr "Este manejador de registro es un java.util.LogHandler que toma el objeto LogRecord como parámetro del método publish que será llamado cuando se escriba un registro en una aplicación. Por ejemplo, como log.info(\"¡Me encanta el código abierto!\");. Si se configura correctamente, este manejador de logs será llamado cuando se escriban los logs. Como queremos poner los mensajes de registro en AWS CloudWatch, necesitamos añadir la lógica para hacerlo. Por lo tanto, creamos un InputLogEvent y llamamos a _putLogEvents()_ que pone el mensaje de registro en CloudWatch. Eso es básicamente todo."

#. type: delimited block =
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:145
#, fuzzy
msgid "The snippets in this article are a bit shortened, but basically that’s what the extension contains."
msgstr "Los fragmentos de este artículo están un poco acortados, pero básicamente es lo que contiene la extensión."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:149
#, fuzzy
msgid "Let’s sum it up: There is a processor class which initializes the extension, a configuration class which is needed to make the extension configurable, a value factory class which takes these configurations and creates a AWS CloudWatch connection as well as a custom _LogHandler_ class which pushes each log message to CloudWatch."
msgstr "Vamos a resumirlo: Hay una clase procesadora que inicializa la extensión, una clase de configuración que se necesita para hacer la extensión configurable, una clase de fábrica de valores que toma estas configuraciones y crea una conexión de AWS CloudWatch, así como una clase _LogHandler_ personalizada que empuja cada mensaje de registro a CloudWatch."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:151
#, fuzzy
msgid "After doing all these things, the only thing missing is releasing a version of the extension. This can be done by opening a Pull Request which updates the current-version and _next-version_ entry of the _project.yml_ file in the _.github_ folder. After merging this Pull Request, some GitHub Actions will be triggered which will bring your new version to Maven Central and finally others can use your extension as well :-)"
msgstr "Después de hacer todas estas cosas, lo único que falta es liberar una versión de la extensión. Esto puede hacerse abriendo un Pull Request que actualice la entrada current-version y _next-version_ del archivo _project.yml_ en la carpeta _.github_. Después de fusionar este Pull Request, se activarán algunas acciones de GitHub que llevarán tu nueva versión a Maven Central y finalmente otros podrán usar tu extensión también :-)"

#. type: Title ==
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:152
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumen"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:155
#, fuzzy
msgid "As you can see, creating, implementing and sharing Quarkus extensions with others is actually very easy. So if you have an idea of an extension which could be useful for the community, feel free to pitch your idea by creating a new extension proposal issue on the quarkusio/quarkus GitHub Issues section :-)"
msgstr "Como puedes ver, crear, implementar y compartir extensiones de Quarkus con otros es realmente muy fácil. Así que si tienes una idea de una extensión que podría ser útil para la comunidad, no dudes en lanzar tu idea creando un nuevo tema de propuesta de extensión en la sección quarkusio/quarkus GitHub Issues :-)"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:157
#, fuzzy
msgid "In case you have questions, suggestions or something else, please feel free to contact me on https://twitter.com/bennetelli[Twitter]."
msgstr "Si tiene preguntas, sugerencias o algo más, no dude en ponerse en contacto conmigo en  link:https://twitter.com/bennetelli[Twitter]."

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:160
#, fuzzy
msgid "Best regards, Bennet"
msgstr "Saludos cordiales, Bennet"

#. type: Title ==
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:161
#, fuzzy, no-wrap
msgid "Links"
msgstr "Enlaces"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:163
#, fuzzy
msgid "https://quarkus.io/blog/quarkiverse/"
msgstr "https://quarkus.io/blog/quarkiverse/"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:164
#, fuzzy
msgid "https://github.com/quarkiverse"
msgstr "https://github.com/quarkiverse"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:165
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-logging-cloudwatch"
msgstr "https://github.com/quarkiverse/quarkus-logging-cloudwatch"

#. type: Plain text
#: upstream/_posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc:165
#, fuzzy
msgid "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"
msgstr "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Creating a Quarkus extension for AWS CloudWatch'\n"
#~ "date: 2022-01-13\n"
#~ "tags: extension cloudwatch\n"
#~ "author: bennetelli\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Creación de una extensión de Quarkus para AWS CloudWatch\n"
#~ "date: 2022-01-13\n"
#~ "tags: extension cloudwatch\n"
#~ "author: bennetelli\n"
#~ "---\n"
