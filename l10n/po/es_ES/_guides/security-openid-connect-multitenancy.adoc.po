# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-12-14 18:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "Uso de OpenID Connect (OIDC) Multi-Tenancy"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:12
#, fuzzy
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "Esta guía muestra cómo su aplicación OpenID Connect (OIDC) puede soportar multi-tenancy para que pueda servir a varios inquilinos desde una sola aplicación. Los inquilinos pueden ser distintos reinos o dominios de seguridad dentro del mismo proveedor de OpenID o incluso distintos proveedores de OpenID."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:14
#, fuzzy
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "Cuando se sirve a varios clientes desde la misma aplicación (por ejemplo: SaaS), cada cliente es un tenant. Al habilitar el soporte multi-tenancy a sus aplicaciones se le permite también soportar políticas de autenticación distintas para cada tenant aunque eso signifique autenticar contra diferentes proveedores de OpenID, como Keycloak y Google."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:16
#, fuzzy
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "Lea la guía  link:security-openid-connect.html[Using OpenID Connect to Protect Service Applications (Uso de OpenID Connect para proteger las aplicaciones de servicio] ) si necesita autorizar a un inquilino mediante la autorización de tokens de portador."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:18
#, fuzzy
msgid "Please read the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Applications] guide if you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow."
msgstr "Lea la guía  link:security-openid-connect-web-authentication.html[Using OpenID Connect to Protect Web Applications (Uso de OpenID Connect para proteger las aplicaciones web] ) si necesita autenticar y autorizar a un inquilino mediante el flujo de códigos de autorización de OpenID Connect."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:19
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Requisitos previos"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:24
#, fuzzy
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[herramienta jq]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:25
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitectura"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:28
#, fuzzy
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr "En este ejemplo, construimos una aplicación muy simple que ofrece una sola página de terreno:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:30
#, fuzzy
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:32
#, fuzzy
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "La página de inicio es servida por un recurso JAX-RS y muestra la información obtenida del proveedor OpenID sobre el usuario autenticado y el inquilino actual."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:34
#, fuzzy
msgid "`/{tenant}`/bearer"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:36
#, fuzzy
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "La página de inicio es servida por un recurso JAX-RS y muestra la información obtenida del proveedor OpenID sobre el usuario autenticado y el inquilino actual."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:37
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solución"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:41
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Le recomendamos que siga las instrucciones de las siguientes secciones y cree la aplicación paso a paso. Sin embargo, puede ir directamente al ejemplo completado."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:43
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone el repositorio Git: `git clone {quickstarts-clone-url}` o descargue un {quickstarts-archive-url}[archivo]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:45
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "La solución se encuentra en `security-openid-connect-multi-tenancy-quickstart` {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directorio]."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:46
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Creación del proyecto Maven"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:49
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "En primer lugar, necesitamos un nuevo proyecto. Cree un nuevo proyecto con el siguiente comando:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:56
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "Si ya tienes tu proyecto Quarkus configurado, puedes añadir la extensión `oidc` a tu proyecto ejecutando el siguiente comando en el directorio base de tu proyecto:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:61
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Esto añadirá lo siguiente a su archivo de construcción:"

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:63
#: upstream/_guides/security-openid-connect-multitenancy.adoc:403
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:72
#: upstream/_guides/security-openid-connect-multitenancy.adoc:423
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:75
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:77
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "Escribir la aplicación"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:80
#, fuzzy
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:"
msgstr "Empecemos por implementar el endpoint `/{tenant}`. Como se puede ver en el código fuente de abajo es sólo un recurso JAX-RS regular:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:84
#: upstream/_guides/security-openid-connect-multitenancy.adoc:154
#: upstream/_guides/security-openid-connect-multitenancy.adoc:241
#: upstream/_guides/security-openid-connect-multitenancy.adoc:277
#: upstream/_guides/security-openid-connect-multitenancy.adoc:456
#: upstream/_guides/security-openid-connect-multitenancy.adoc:538
#: upstream/_guides/security-openid-connect-multitenancy.adoc:705
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:89
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:91
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:93
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:102
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:108
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:120
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the ID Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return ID Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getIdTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:123
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:126
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:139
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the Access Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return Access Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    @Path(\"bearer\")\n"
"    public String getAccessTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:142
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.accessToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(accessToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:146
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:150
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr "Para resolver el inquilino a partir de las solicitudes entrantes y asignarlo a una configuración específica de inquilinos de `quarkus-oidc` en application.properties, es necesario crear una implementación para la interfaz `io.quarkus.oidc.TenantResolver`."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:156
#: upstream/_guides/security-openid-connect-multitenancy.adoc:243
#: upstream/_guides/security-openid-connect-multitenancy.adoc:279
#: upstream/_guides/security-openid-connect-multitenancy.adoc:709
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:158
#, no-wrap
msgid "import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:165
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.OidcTenantConfig.ApplicationType;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:168
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:172
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:175
#, no-wrap
msgid ""
"        if (path.startsWith(\"/tenant-a\")) {\n"
"           String keycloakUrl = ConfigProvider.getConfig().getValue(\"keycloak.url\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:189
#, no-wrap
msgid ""
"            OidcTenantConfig config = new OidcTenantConfig();\n"
"            config.setTenantId(\"tenant-a\");\n"
"            config.setAuthServerUrl(keycloakUrl + \"/realms/tenant-a\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            config.getCredentials().setSecret(\"secret\");\n"
"            config.setApplicationType(ApplicationType.HYBRID);\n"
"            return Uni.createFrom().item(config);\n"
"        } else {\n"
"            // resolve to default tenant config\n"
"            return Uni.createFrom().nullItem();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:192
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "A partir de la implementación anterior, los inquilinos se resuelven a partir de la ruta de la solicitud, de modo que en caso de que no se pueda inferir ningún inquilino, se devuelve `null` para indicar que se debe utilizar la configuración de inquilinos por defecto."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:194
#, fuzzy
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr "Tenga en cuenta que el tipo de aplicación `tenant-a` es `hybrid` - puede aceptar tokens de portador HTTP si se proporcionan, de lo contrario iniciará un flujo de código de autorización cuando se requiera la autenticación."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:195
#, fuzzy, no-wrap
msgid "Configuring the application"
msgstr "Configuración de la aplicación"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:203
#: upstream/_guides/security-openid-connect-multitenancy.adoc:225
#: upstream/_guides/security-openid-connect-multitenancy.adoc:441
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:205
#: upstream/_guides/security-openid-connect-multitenancy.adoc:443
#, no-wrap
msgid "# Tenant A Configuration is created dynamically in CustomTenantConfigResolver\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:209
#: upstream/_guides/security-openid-connect-multitenancy.adoc:234
#: upstream/_guides/security-openid-connect-multitenancy.adoc:447
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:212
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` prodile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr "La primera configuración es la configuración por defecto del inquilino que debe ser utilizada cuando el inquilino no puede ser inferido de la solicitud. Esta configuración utiliza una instancia de Keycloak para autenticar a los usuarios."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:214
#, fuzzy
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "La segunda configuración es la que se utilizará cuando se asigne una solicitud entrante al inquilino `tenant-a`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:216
#, fuzzy
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "Tenga en cuenta que ambas configuraciones se asignan a la misma instancia de servidor de Keycloak mientras se utilizan distintos `realms`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:218
#, fuzzy
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "También puede configurar el inquilino `tenant-a` directamente en `application.properties`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:230
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:237
#, fuzzy
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr "y utilizar un `TenantConfigResolver` personalizado para resolverlo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:246
#: upstream/_guides/security-openid-connect-multitenancy.adoc:282
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:249
#: upstream/_guides/security-openid-connect-multitenancy.adoc:285
#: upstream/_guides/security-openid-connect-multitenancy.adoc:716
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:254
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:259
#: upstream/_guides/security-openid-connect-multitenancy.adoc:652
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:263
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:266
#, fuzzy
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "Puede definir varios inquilinos en su archivo de configuración, sólo asegúrese de que tienen un alias único para que pueda asignarlos correctamente cuando resuelva un inquilino desde su implementación de `TenantResolver`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:268
#, fuzzy
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr "Sin embargo, el uso de una resolución estática de inquilinos (configurando los inquilinos en `application.properties` y resolviéndolos con `TenantResolver`) impide probar el endpoint con `Dev Services for Keycloak` ya que `Dev Services for Keycloak` no tiene conocimiento de cómo se mapearán las peticiones a los inquilinos individuales y no puede proporcionar dinámicamente los valores específicos de los inquilinos `quarkus.oidc.&amp;lt;tenant-id&amp;gt;.auth-server-url` y, por lo tanto, el uso de los prefijos de `%prod` con las URLs específicas de los inquilinos en `application.properties` no funcionará en las pruebas o en el modo dev."

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:273
#, fuzzy
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "Cuando un inquilino actual representa una aplicación OIDC `web-app`, el `io.vertx.ext.web.RoutingContext` actual contendrá un atributo `tenant-id` en el momento en que se haya llamado al resolvedor de inquilinos personalizado para todas las solicitudes que completen el flujo de autenticación de código y las solicitudes ya autenticadas, cuando ya exista un estado específico del inquilino o una cookie de sesión. Por lo tanto, cuando se trabaja con múltiples proveedores de OpenID Connect, sólo se necesita una comprobación específica de la ruta para resolver un ID de inquilino si el `RoutingContext` no tiene el atributo `tenant-id` establecido, por ejemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:295
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:304
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:307
#, fuzzy
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr "Se puede utilizar una técnica similar con `TenantConfigResolver`, donde se puede utilizar un `tenant-id` proporcionado en el contexto para devolver `OidcTenantConfig` ya preparado con la solicitud anterior."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:312
#, fuzzy
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` then you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver as a `RoutingContext` attribute, for example:"
msgstr "Si también utiliza  link:hibernate-orm.html#multitenancy[Hibernate ORM multitenancy] y ambos IDs de inquilinos de OIDC e Hibernate ORM son los mismos y deben ser extraídos de Vert.x `RoutingContext` entonces puede pasar el id de inquilino del Resolutor de Inquilinos de OIDC al Resolutor de Inquilinos de Hibernate ORM como un atributo `RoutingContext`, por ejemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:316
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:324
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:327
#, fuzzy, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Inicio y configuración del servidor Keycloak"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:330
#, fuzzy
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Para iniciar un servidor de Keycloak puede utilizar Docker y simplemente ejecutar el siguiente comando:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:334
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:337
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "donde `keycloak.version` debe estar ajustado a `17.0.0` o superior."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:339
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Debería poder acceder a su servidor Keycloak en  link:http://localhost:8180[localhost:8180]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:341
#, fuzzy
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Inicie sesión como el usuario `admin` para acceder a la consola de administración de Keycloak. El nombre de usuario debe ser `admin` y la contraseña `admin`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:343
#, fuzzy
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "Ahora, siga los pasos siguientes para importar los reinos de los dos inquilinos:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:345
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "Importe el archivo {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] para crear el reino por defecto"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:346
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "Importe el archivo {quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] para crear el reino para el tenant `tenant-a`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:348
#, fuzzy
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "Para más detalles, consulte la documentación de Keycloak sobre cómo  link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[crear un nuevo reino]."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:349
#, fuzzy, no-wrap
msgid "Running and Using the Application"
msgstr "Ejecución y uso de la aplicación"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:351
#, fuzzy, no-wrap
msgid "Running in Developer Mode"
msgstr "Ejecución en modo desarrollador"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:354
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "Para ejecutar el microservicio en modo dev, utilice:"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:357
#, fuzzy, no-wrap
msgid "Running in JVM Mode"
msgstr "Ejecución en modo JVM"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:360
#, fuzzy
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "Cuando hayas terminado de jugar con el modo dev, puedes ejecutarlo como una aplicación Java estándar."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:362
#, fuzzy
msgid "First compile it:"
msgstr "Primero compilarlo:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:366
#, fuzzy
msgid "Then run it:"
msgstr "Entonces, ejecútalo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:370
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:372
#, fuzzy, no-wrap
msgid "Running in Native Mode"
msgstr "Ejecución en modo nativo"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:375
#, fuzzy
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "Esta misma demo puede compilarse en código nativo: no requiere modificaciones."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:379
#, fuzzy
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "Esto implica que ya no es necesario instalar una JVM en su entorno de producción, ya que la tecnología de tiempo de ejecución está incluida en el binario producido, y optimizada para ejecutarse con una sobrecarga mínima de recursos."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:382
#, fuzzy
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr "La compilación tardará un poco más, por lo que este paso está desactivado por defecto; vamos a construir de nuevo activando la compilación nativa:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:386
#, fuzzy
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "Después de tomar una taza de café, podrás ejecutar este binario directamente:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:390
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:392
#, fuzzy, no-wrap
msgid "Test the Application"
msgstr "Probar la aplicación"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:394
#, fuzzy, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr "Utilizar los servicios de desarrollo para Keycloak"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:398
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr "Se recomienda el uso de  link:security-openid-connect-dev-services.html[Dev Services para Keycloak] para las pruebas de integración contra Keycloak. `Dev Services for Keycloak` lanzará e inicializará un contenedor de prueba: importará los reinos configurados y establecerá una URL base de Keycloak para `CustomTenantResolver` utilizada en este quickstart para calcular una URL específica del reino."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:401
#, fuzzy
msgid "First you need to add the following dependencies:"
msgstr "En primer lugar, hay que añadir las siguientes dependencias:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:420
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:428
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:432
#, fuzzy
msgid "`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.  `HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr "`quarkus-test-keycloak-server` proporciona una clase de utilidad `io.quarkus.test.keycloak.client.KeycloakTestClient` para adquirir los tokens de acceso específicos del reino y que puede utilizar con `RestAssured` para probar el punto final `/{tenant}/bearer` que espera tokens de acceso al portador. `HtmlUnit` se utiliza para probar el punto final `/{tenant}` y el flujo de código de autorización."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:434
#, fuzzy
msgid "Next, configure the required realms:"
msgstr "A continuación, configure los dominios necesarios:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:449
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=default-tenant-realm.json,tenant-a-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:452
#, fuzzy
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "Por último, escriba su prueba que se ejecutará en modo JVM:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:460
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.containsString;\n"
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:462
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:464
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:469
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:473
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:476
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:478
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:483
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInDefaultTenant() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/default\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:485
#, no-wrap
msgid "            assertEquals(\"Sign in to quarkus\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:487
#: upstream/_guides/security-openid-connect-multitenancy.adoc:505
#, no-wrap
msgid "            HtmlForm loginForm = page.getForms().get(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:490
#: upstream/_guides/security-openid-connect-multitenancy.adoc:508
#, no-wrap
msgid ""
"            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n"
"            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:492
#: upstream/_guides/security-openid-connect-multitenancy.adoc:510
#, no-wrap
msgid "            page = loginForm.getInputByName(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:496
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"tenant\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:501
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantAWebApp() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-a\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:503
#, no-wrap
msgid "            assertEquals(\"Sign in to tenant-a\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:514
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"alice@tenant-a.org\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:520
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantABearerToken() throws IOException {\n"
"        RestAssured.given().auth().oauth2(getAccessToken()).when()\n"
"            .get(\"/tenant-a/bearer\").then().body(containsString(\"alice@tenant-a.org\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:524
#, no-wrap
msgid ""
"    private String getAccessToken() {\n"
"        return keycloakClient.getRealmAccessToken(\"tenant-a\", \"alice\", \"alice\", \"multi-tenant-client\", \"secret\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:531
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:534
#, fuzzy
msgid "and in native mode:"
msgstr "Ejecución en modo nativo"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:540
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:544
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class CodeFlowIT extends CodeFlowTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:547
#, fuzzy
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "Por favor, vea  link:security-openid-connect-dev-services.html[Dev Services for Keycloak] para más información sobre la forma en que se inicializa y configura."

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:548
#, fuzzy, no-wrap
msgid "Use Browser"
msgstr "Utilizar el navegador"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:551
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "Para probar la aplicación, debe abrir su navegador y acceder a la siguiente URL:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:553
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "link:http://localhost:8080/default[http://localhost:8080/default]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:556
#, fuzzy
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "Si todo funciona como se espera, debería ser redirigido al servidor de Keycloak para autenticarse. Tenga en cuenta que la ruta solicitada define un tenant `default` que no tenemos mapeado en el archivo de configuración. En este caso, se utilizará la configuración por defecto."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:558
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "Para autenticarse en la aplicación debe introducir las siguientes credenciales cuando se encuentre en la página de inicio de sesión de Keycloak:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:560
#, fuzzy
msgid "Username: *alice*"
msgstr "Nombre de usuario: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:561
#, fuzzy
msgid "Password: *alice*"
msgstr "Contraseña: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:563
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "Después de hacer clic en el botón `Login` debería ser redirigido de nuevo a la aplicación."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:565
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "Si intenta ahora acceder a la aplicación en la siguiente URL:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:567
#, fuzzy
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "link:http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:569
#, fuzzy
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "Debería ser redirigido de nuevo a la página de inicio de sesión en Keycloak. Sin embargo, ahora vas a autenticar usando un `realm` diferente."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:572
#, fuzzy
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "En ambos casos, si el usuario se autentifica correctamente, la página de destino mostrará el nombre y el correo electrónico del usuario. Aunque el usuario `alice` existe en ambos tenants, para la aplicación son usuarios distintos que pertenecen a reinos/tenants diferentes."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:573
#, fuzzy, no-wrap
msgid "Resolving Tenant Identifiers with Annotations"
msgstr "Resolución de identificadores de inquilinos con anotaciones"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:578
#, fuzzy
msgid "You can use the annotations and CDI interceptors for resolving the tenant identifiers as an alternative to using `quarkus.oidc.TenantResolver`. This can be done by setting the value for the key `OidcUtils.TENANT_ID_ATTRIBUTE` on the current `RoutingContext`."
msgstr "Puede utilizar las anotaciones y los interceptores CDI para resolver los identificadores de los inquilinos como alternativa al uso de `quarkus.oidc.TenantResolver`. Esto puede hacerse estableciendo el valor de la clave `OidcUtils.TENANT_ID_ATTRIBUTE` en el actual `RoutingContext`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:581
#, fuzzy
msgid "Assuming your application supports two OIDC tenants (`hr`, and default) first you need to define one annotation per tenant ID other than default:"
msgstr "Asumiendo que su aplicación soporta dos tenants OIDC ( `hr`, y por defecto) primero necesita definir una anotación por cada ID de tenant que no sea por defecto:"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:586
#, fuzzy
msgid "Proactive HTTP authentication needs to be disabled (`quarkus.http.auth.proactive=false`) for this to work. See xref:security-built-in-authentication-support-concept.adoc#proactive-authentication[Proactive Authentication] section for further details."
msgstr "La autenticación proactiva HTTP debe estar desactivada ( `quarkus.http.auth.proactive=false`) para que esto funcione. Consulte la sección  link:security-built-in-authentication.html#proactive-authentication[Autenticación] proactiva para obtener más detalles."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:596
#, no-wrap
msgid ""
"@Inherited\n"
"@InterceptorBinding\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target({ElementType.METHOD, ElementType.TYPE})\n"
"public @interface HrTenant {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:599
#, fuzzy
msgid "Next, you'll need one interceptor for each of those annotations:"
msgstr "A continuación, necesitarás un interceptor para cada una de esas anotaciones:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:607
#, no-wrap
msgid ""
"@Interceptor\n"
"@HrTenant\n"
"public class HrTenantInterceptor {\n"
"    @Inject\n"
"    RoutingContext routingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:614
#, no-wrap
msgid ""
"    @AroundInvoke\n"
"    Object setTenant(InvocationContext context) throws Exception {\n"
"        routingContext.put(OidcUtils.TENANT_ID_ATTRIBUTE, \"hr\");\n"
"        return context.proceed();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:619
#, fuzzy
msgid "Now all methods and classes carrying `@HrTenant` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr "Ahora todos los métodos y clases que lleven `@HrTenant` serán autenticados usando el proveedor OIDC configurado por `quarkus.oidc.hr.auth-server-url`, mientras que todas las demás clases y métodos seguirán siendo autenticados usando el proveedor OIDC por defecto."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:621
#, fuzzy, no-wrap
msgid "Programmatically Resolving Tenants Configuration"
msgstr "Resolver la configuración de los inquilinos de forma programada"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:625
#, fuzzy
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "Si necesita una configuración más dinámica para los diferentes inquilinos que desea admitir y no quiere acabar con múltiples entradas en su archivo de configuración, puede utilizar la opción `io.quarkus.oidc.TenantConfigResolver`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:627
#, fuzzy
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "Esta interfaz permite crear dinámicamente configuraciones de inquilinos en tiempo de ejecución:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:631
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:634
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:639
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:642
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:647
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, TenantConfigResolver.TenantConfigRequestContext requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:658
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:662
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:665
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:670
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:672
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:674
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:676
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:680
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:683
#, fuzzy
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "El `OidcTenantConfig` devuelto por este método es el mismo que se utiliza para analizar la configuración del espacio de nombres `oidc` desde el `application.properties`. Puede rellenarlo utilizando cualquiera de las configuraciones soportadas por la extensión `quarkus-oidc`."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:684
#, fuzzy, no-wrap
msgid "Tenant Resolution for OIDC 'web-app' applications"
msgstr "Resolución del inquilino para las aplicaciones de la \"web-app\" de la OIDC"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:687
#, fuzzy
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "Hay varias opciones disponibles para seleccionar la configuración del inquilino que se debe utilizar para asegurar la solicitud HTTP actual tanto para las aplicaciones `service` como `web-app` OIDC, como por ejemplo:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:689
#, fuzzy
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "Compruebe las rutas URL, por ejemplo, una configuración `tenant-service` tiene que ser utilizada para las rutas \"/servicio\", mientras que una configuración `tenant-manage` - para las rutas \"/gestión\"."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:690
#, fuzzy
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "Compruebe las cabeceras HTTP, por ejemplo, si la ruta de la URL es siempre '/service', una cabecera como \"Realm: service\" o \"Realm: management\" puede ayudar a seleccionar entre las configuraciones `tenant-service` y `tenant-manage`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:691
#, fuzzy
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "Comprobar los parámetros de consulta de la URL - puede funcionar de forma similar a la forma en que se utilizan las cabeceras para seleccionar la configuración del inquilino"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:693
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "Todas estas opciones pueden implementarse fácilmente con las implementaciones personalizadas `TenantResolver` y `TenantConfigResolver` para las aplicaciones OIDC `service`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:695
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "Sin embargo, debido a una redirección HTTP necesaria para completar el flujo de autenticación de código para las aplicaciones de OIDC `web-app`, puede ser necesaria una cookie HTTP personalizada para seleccionar la misma configuración del inquilino antes y después de esta solicitud de redirección porque:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:697
#, fuzzy
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "La ruta de la URL puede no ser la misma después de la solicitud de redirección si se ha registrado una única URL de redirección en el proveedor de OIDC - la ruta original de la solicitud puede ser restaurada pero después de que se resuelva la configuración del inquilino"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:698
#, fuzzy
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "Las cabeceras HTTP utilizadas durante la solicitud original no están disponibles después de la redirección"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:699
#, fuzzy
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "Los parámetros de consulta de la URL personalizada se restauran después de la redirección, pero después de resolver la configuración del inquilino"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:701
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "Una opción para garantizar que la información para resolver las configuraciones de los inquilinos para las aplicaciones de `web-app` esté disponible antes y después de la redirección es utilizar una cookie, por ejemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:707
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:713
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:727
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:731
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:734
#, fuzzy, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "Desactivación de las configuraciones de los inquilinos"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:737
#, fuzzy
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "Las implementaciones personalizadas de `TenantResolver` y `TenantConfigResolver` pueden devolver `null` si no se puede inferir ningún inquilino a partir de la solicitud actual y se requiere un retorno a la configuración de inquilinos por defecto."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:739
#, fuzzy
msgid "If it is expected that the custom resolvers will always infer a tenant then the default tenant configuration is not needed. One can disable it with the `quarkus.oidc.tenant-enabled=false` setting."
msgstr "Si se espera que los resolvedores personalizados siempre infieran un inquilino, entonces la configuración de inquilinos por defecto no es necesaria. Se puede desactivar con el ajuste `quarkus.oidc.tenant-enabled=false`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:741
#, fuzzy
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "Tenga en cuenta que también se pueden desactivar las configuraciones específicas de los inquilinos, por ejemplo: `quarkus.oidc.tenant-a.tenant-enabled=false`."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:742
#, fuzzy, no-wrap
msgid "Configuration Reference"
msgstr "Referencia de configuración"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:746
#, fuzzy, no-wrap
msgid "References"
msgstr "Referencias"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:749
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Documentación de Keycloak]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:750
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:751
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[Token web JSON]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:752
#, fuzzy
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "link:https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:752
#, fuzzy
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "link:security.html[Seguridad Quarkus]"

#, fuzzy
#~ msgid "Google OpenID Provider Configuration"
#~ msgstr "Configuración del proveedor de Google OpenID"

#, fuzzy
#~ msgid "In order to set up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here]."
#~ msgstr "Para establecer la configuración de `tenant-a` para utilizar Google OpenID Provider, es necesario crear un proyecto como se describe  link:https://developers.google.com/identity/protocols/OpenIDConnect[aquí]."

#, fuzzy
#~ msgid "Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:"
#~ msgstr "Una vez que haya creado el proyecto y tenga su proyecto `client_id` y `client_secret`, puede intentar configurar un inquilino de la siguiente manera:"

#, fuzzy
#~ msgid "===\n"
#~ msgstr "==="
